/**
 * EdiFabric API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { EdiFabricWebApiModelsErrorDetails } from '../model/ediFabricWebApiModelsErrorDetails';
import { EdiFabricWebApiModelsGenerateEdifactGroup } from '../model/ediFabricWebApiModelsGenerateEdifactGroup';
import { EdiFabricWebApiModelsGenerateEdifactInterchange } from '../model/ediFabricWebApiModelsGenerateEdifactInterchange';
import { EdiFabricWebApiModelsGenerateEdifactTransactions } from '../model/ediFabricWebApiModelsGenerateEdifactTransactions';
import { EdiFabricWebApiModelsGenerateGs } from '../model/ediFabricWebApiModelsGenerateGs';
import { EdiFabricWebApiModelsGenerateIsa } from '../model/ediFabricWebApiModelsGenerateIsa';
import { EdiFabricWebApiModelsGenerateUnb } from '../model/ediFabricWebApiModelsGenerateUnb';
import { EdiFabricWebApiModelsGenerateUng } from '../model/ediFabricWebApiModelsGenerateUng';
import { EdiFabricWebApiModelsGenerateX12Group } from '../model/ediFabricWebApiModelsGenerateX12Group';
import { EdiFabricWebApiModelsGenerateX12Interchange } from '../model/ediFabricWebApiModelsGenerateX12Interchange';
import { EdiFabricWebApiModelsGenerateX12Transactions } from '../model/ediFabricWebApiModelsGenerateX12Transactions';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GenerateService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param generateEdifactGroup 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateEdifactGroup(generateEdifactGroup?: EdiFabricWebApiModelsGenerateEdifactGroup, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateEdifactGroup(generateEdifactGroup?: EdiFabricWebApiModelsGenerateEdifactGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateEdifactGroup(generateEdifactGroup?: EdiFabricWebApiModelsGenerateEdifactGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateEdifactGroup(generateEdifactGroup?: EdiFabricWebApiModelsGenerateEdifactGroup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/edifact-group`,
            generateEdifactGroup,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateEdifactInterchange 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateEdifactInterchange(generateEdifactInterchange?: EdiFabricWebApiModelsGenerateEdifactInterchange, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateEdifactInterchange(generateEdifactInterchange?: EdiFabricWebApiModelsGenerateEdifactInterchange, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateEdifactInterchange(generateEdifactInterchange?: EdiFabricWebApiModelsGenerateEdifactInterchange, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateEdifactInterchange(generateEdifactInterchange?: EdiFabricWebApiModelsGenerateEdifactInterchange, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/edifact-interchange`,
            generateEdifactInterchange,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateEdifactTransactions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateEdifactTransactions(generateEdifactTransactions?: EdiFabricWebApiModelsGenerateEdifactTransactions, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateEdifactTransactions(generateEdifactTransactions?: EdiFabricWebApiModelsGenerateEdifactTransactions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateEdifactTransactions(generateEdifactTransactions?: EdiFabricWebApiModelsGenerateEdifactTransactions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateEdifactTransactions(generateEdifactTransactions?: EdiFabricWebApiModelsGenerateEdifactTransactions, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/edifact-transactions`,
            generateEdifactTransactions,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateGs 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateGs(generateGs?: EdiFabricWebApiModelsGenerateGs, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateGs(generateGs?: EdiFabricWebApiModelsGenerateGs, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateGs(generateGs?: EdiFabricWebApiModelsGenerateGs, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateGs(generateGs?: EdiFabricWebApiModelsGenerateGs, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/gs`,
            generateGs,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateIsa 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateIsa(generateIsa?: EdiFabricWebApiModelsGenerateIsa, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateIsa(generateIsa?: EdiFabricWebApiModelsGenerateIsa, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateIsa(generateIsa?: EdiFabricWebApiModelsGenerateIsa, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateIsa(generateIsa?: EdiFabricWebApiModelsGenerateIsa, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/isa`,
            generateIsa,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateUnb 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateUnb(generateUnb?: EdiFabricWebApiModelsGenerateUnb, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateUnb(generateUnb?: EdiFabricWebApiModelsGenerateUnb, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateUnb(generateUnb?: EdiFabricWebApiModelsGenerateUnb, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateUnb(generateUnb?: EdiFabricWebApiModelsGenerateUnb, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/unb`,
            generateUnb,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateUng 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateUng(generateUng?: EdiFabricWebApiModelsGenerateUng, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateUng(generateUng?: EdiFabricWebApiModelsGenerateUng, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateUng(generateUng?: EdiFabricWebApiModelsGenerateUng, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateUng(generateUng?: EdiFabricWebApiModelsGenerateUng, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/ung`,
            generateUng,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateX12Group 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateX12Group(generateX12Group?: EdiFabricWebApiModelsGenerateX12Group, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateX12Group(generateX12Group?: EdiFabricWebApiModelsGenerateX12Group, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateX12Group(generateX12Group?: EdiFabricWebApiModelsGenerateX12Group, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateX12Group(generateX12Group?: EdiFabricWebApiModelsGenerateX12Group, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/x12-group`,
            generateX12Group,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateX12Interchange 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateX12Interchange(generateX12Interchange?: EdiFabricWebApiModelsGenerateX12Interchange, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateX12Interchange(generateX12Interchange?: EdiFabricWebApiModelsGenerateX12Interchange, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateX12Interchange(generateX12Interchange?: EdiFabricWebApiModelsGenerateX12Interchange, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateX12Interchange(generateX12Interchange?: EdiFabricWebApiModelsGenerateX12Interchange, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/x12-interchange`,
            generateX12Interchange,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param generateX12Transactions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateX12Transactions(generateX12Transactions?: EdiFabricWebApiModelsGenerateX12Transactions, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public generateX12Transactions(generateX12Transactions?: EdiFabricWebApiModelsGenerateX12Transactions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public generateX12Transactions(generateX12Transactions?: EdiFabricWebApiModelsGenerateX12Transactions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public generateX12Transactions(generateX12Transactions?: EdiFabricWebApiModelsGenerateX12Transactions, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/generate/x12-transactions`,
            generateX12Transactions,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
