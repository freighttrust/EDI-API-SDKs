/**
 * EdiFabric API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { EdiFabricWebApiModelsEdifactAcknowledgment } from '../model/ediFabricWebApiModelsEdifactAcknowledgment';
import { EdiFabricWebApiModelsErrorDetails } from '../model/ediFabricWebApiModelsErrorDetails';
import { EdiFabricWebApiModelsX12Acknowledgment } from '../model/ediFabricWebApiModelsX12Acknowledgment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AcknowledgeService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param ediFile EDI file to translate
     * @param readMode 
     * @param accept 
     * @param charSet 
     * @param continueOnError 
     * @param skipTrailerValidation 
     * @param decimalPoint 
     * @param syntaxSet 
     * @param transactionDuplicate 
     * @param groupDuplicate 
     * @param technicalAck 
     * @param generateForValidTransactions 
     * @param allowPartial 
     * @param transactionControlNumber 
     * @param eancomSyntax 
     * @param includeTransactions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acknowledgeEdifact(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, decimalPoint?: '.' | ',', syntaxSet?: 'unoa' | 'unob', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, eancomSyntax?: '4' | '3' | 'older', includeTransactions?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<EdiFabricWebApiModelsEdifactAcknowledgment>>;
    public acknowledgeEdifact(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, decimalPoint?: '.' | ',', syntaxSet?: 'unoa' | 'unob', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, eancomSyntax?: '4' | '3' | 'older', includeTransactions?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EdiFabricWebApiModelsEdifactAcknowledgment>>>;
    public acknowledgeEdifact(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, decimalPoint?: '.' | ',', syntaxSet?: 'unoa' | 'unob', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, eancomSyntax?: '4' | '3' | 'older', includeTransactions?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EdiFabricWebApiModelsEdifactAcknowledgment>>>;
    public acknowledgeEdifact(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, decimalPoint?: '.' | ',', syntaxSet?: 'unoa' | 'unob', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, eancomSyntax?: '4' | '3' | 'older', includeTransactions?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ediFile === null || ediFile === undefined) {
            throw new Error('Required parameter ediFile was null or undefined when calling acknowledgeEdifact.');
        }
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (readMode !== undefined && readMode !== null) {
            queryParameters = queryParameters.set('read_mode', <any>readMode);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (charSet !== undefined) {
            formParams = formParams.append('char_set', <any>charSet) || formParams;
        }
        if (continueOnError !== undefined) {
            formParams = formParams.append('continue_on_error', <any>continueOnError) || formParams;
        }
        if (skipTrailerValidation !== undefined) {
            formParams = formParams.append('skip_trailer_validation', <any>skipTrailerValidation) || formParams;
        }
        if (decimalPoint !== undefined) {
            formParams = formParams.append('decimal_point', <any>decimalPoint) || formParams;
        }
        if (syntaxSet !== undefined) {
            formParams = formParams.append('syntax_set', <any>syntaxSet) || formParams;
        }
        if (transactionDuplicate !== undefined) {
            formParams = formParams.append('transaction_duplicate', <any>transactionDuplicate) || formParams;
        }
        if (groupDuplicate !== undefined) {
            formParams = formParams.append('group_duplicate', <any>groupDuplicate) || formParams;
        }
        if (technicalAck !== undefined) {
            formParams = formParams.append('technical_ack', <any>technicalAck) || formParams;
        }
        if (generateForValidTransactions !== undefined) {
            formParams = formParams.append('generate_for_valid_transactions', <any>generateForValidTransactions) || formParams;
        }
        if (allowPartial !== undefined) {
            formParams = formParams.append('allow_partial', <any>allowPartial) || formParams;
        }
        if (transactionControlNumber !== undefined) {
            formParams = formParams.append('transaction_control_number', <any>transactionControlNumber) || formParams;
        }
        if (eancomSyntax !== undefined) {
            formParams = formParams.append('eancom_syntax', <any>eancomSyntax) || formParams;
        }
        if (includeTransactions !== undefined) {
            formParams = formParams.append('include_transactions', <any>includeTransactions) || formParams;
        }
        if (ediFile !== undefined) {
            formParams = formParams.append('edi_file', <any>ediFile) || formParams;
        }

        return this.httpClient.post<Array<EdiFabricWebApiModelsEdifactAcknowledgment>>(`${this.basePath}/acknowledge/edifact`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ediFile EDI file to translate
     * @param readMode 
     * @param accept 
     * @param charSet 
     * @param continueOnError 
     * @param skipTrailerValidation 
     * @param syntaxSet 
     * @param transactionDuplicate 
     * @param groupDuplicate 
     * @param technicalAck 
     * @param generateForValidTransactions 
     * @param allowPartial 
     * @param transactionControlNumber 
     * @param ak901 
     * @param ackVersion 
     * @param includeTransactions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acknowledgeX12(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, syntaxSet?: 'basic' | 'standard', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, ak901?: 'p' | 'e', ackVersion?: '4010_997' | '5010_997' | '5010_999', includeTransactions?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<EdiFabricWebApiModelsX12Acknowledgment>>;
    public acknowledgeX12(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, syntaxSet?: 'basic' | 'standard', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, ak901?: 'p' | 'e', ackVersion?: '4010_997' | '5010_997' | '5010_999', includeTransactions?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EdiFabricWebApiModelsX12Acknowledgment>>>;
    public acknowledgeX12(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, syntaxSet?: 'basic' | 'standard', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, ak901?: 'p' | 'e', ackVersion?: '4010_997' | '5010_997' | '5010_999', includeTransactions?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EdiFabricWebApiModelsX12Acknowledgment>>>;
    public acknowledgeX12(ediFile: Blob, readMode?: 'read_small' | 'read_large', accept?: 'application/json' | 'application/xml', charSet?: string, continueOnError?: boolean, skipTrailerValidation?: boolean, syntaxSet?: 'basic' | 'standard', transactionDuplicate?: boolean, groupDuplicate?: boolean, technicalAck?: 'default' | 'enforce' | 'suppress', generateForValidTransactions?: boolean, allowPartial?: boolean, transactionControlNumber?: number, ak901?: 'p' | 'e', ackVersion?: '4010_997' | '5010_997' | '5010_999', includeTransactions?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ediFile === null || ediFile === undefined) {
            throw new Error('Required parameter ediFile was null or undefined when calling acknowledgeX12.');
        }
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (readMode !== undefined && readMode !== null) {
            queryParameters = queryParameters.set('read_mode', <any>readMode);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (charSet !== undefined) {
            formParams = formParams.append('char_set', <any>charSet) || formParams;
        }
        if (continueOnError !== undefined) {
            formParams = formParams.append('continue_on_error', <any>continueOnError) || formParams;
        }
        if (skipTrailerValidation !== undefined) {
            formParams = formParams.append('skip_trailer_validation', <any>skipTrailerValidation) || formParams;
        }
        if (syntaxSet !== undefined) {
            formParams = formParams.append('syntax_set', <any>syntaxSet) || formParams;
        }
        if (transactionDuplicate !== undefined) {
            formParams = formParams.append('transaction_duplicate', <any>transactionDuplicate) || formParams;
        }
        if (groupDuplicate !== undefined) {
            formParams = formParams.append('group_duplicate', <any>groupDuplicate) || formParams;
        }
        if (technicalAck !== undefined) {
            formParams = formParams.append('technical_ack', <any>technicalAck) || formParams;
        }
        if (generateForValidTransactions !== undefined) {
            formParams = formParams.append('generate_for_valid_transactions', <any>generateForValidTransactions) || formParams;
        }
        if (allowPartial !== undefined) {
            formParams = formParams.append('allow_partial', <any>allowPartial) || formParams;
        }
        if (transactionControlNumber !== undefined) {
            formParams = formParams.append('transaction_control_number', <any>transactionControlNumber) || formParams;
        }
        if (ak901 !== undefined) {
            formParams = formParams.append('ak901', <any>ak901) || formParams;
        }
        if (ackVersion !== undefined) {
            formParams = formParams.append('ack_version', <any>ackVersion) || formParams;
        }
        if (includeTransactions !== undefined) {
            formParams = formParams.append('include_transactions', <any>includeTransactions) || formParams;
        }
        if (ediFile !== undefined) {
            formParams = formParams.append('edi_file', <any>ediFile) || formParams;
        }

        return this.httpClient.post<Array<EdiFabricWebApiModelsX12Acknowledgment>>(`${this.basePath}/acknowledge/x12`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
