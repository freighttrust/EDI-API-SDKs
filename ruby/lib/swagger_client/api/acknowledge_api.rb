=begin
#EdiFabric API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class AcknowledgeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param edi_file EDI file to translate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :read_mode  (default to read_small)
    # @option opts [String] :accept  (default to application/json)
    # @option opts [String] :char_set  (default to utf-8)
    # @option opts [BOOLEAN] :continue_on_error  (default to true)
    # @option opts [BOOLEAN] :skip_trailer_validation  (default to false)
    # @option opts [String] :decimal_point  (default to .)
    # @option opts [String] :syntax_set 
    # @option opts [BOOLEAN] :transaction_duplicate  (default to false)
    # @option opts [BOOLEAN] :group_duplicate  (default to false)
    # @option opts [String] :technical_ack  (default to default)
    # @option opts [BOOLEAN] :generate_for_valid_transactions  (default to false)
    # @option opts [BOOLEAN] :allow_partial  (default to false)
    # @option opts [Integer] :transaction_control_number  (default to 1)
    # @option opts [String] :eancom_syntax 
    # @option opts [BOOLEAN] :include_transactions  (default to false)
    # @return [Array<EdiFabricWebApiModelsEdifactAcknowledgment>]
    def acknowledge_edifact(edi_file, opts = {})
      data, _status_code, _headers = acknowledge_edifact_with_http_info(edi_file, opts)
      data
    end

    # @param edi_file EDI file to translate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :read_mode 
    # @option opts [String] :accept 
    # @option opts [String] :char_set 
    # @option opts [BOOLEAN] :continue_on_error 
    # @option opts [BOOLEAN] :skip_trailer_validation 
    # @option opts [String] :decimal_point 
    # @option opts [String] :syntax_set 
    # @option opts [BOOLEAN] :transaction_duplicate 
    # @option opts [BOOLEAN] :group_duplicate 
    # @option opts [String] :technical_ack 
    # @option opts [BOOLEAN] :generate_for_valid_transactions 
    # @option opts [BOOLEAN] :allow_partial 
    # @option opts [Integer] :transaction_control_number 
    # @option opts [String] :eancom_syntax 
    # @option opts [BOOLEAN] :include_transactions 
    # @return [Array<(Array<EdiFabricWebApiModelsEdifactAcknowledgment>, Fixnum, Hash)>] Array<EdiFabricWebApiModelsEdifactAcknowledgment> data, response status code and response headers
    def acknowledge_edifact_with_http_info(edi_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AcknowledgeApi.acknowledge_edifact ...'
      end
      # verify the required parameter 'edi_file' is set
      if @api_client.config.client_side_validation && edi_file.nil?
        fail ArgumentError, "Missing the required parameter 'edi_file' when calling AcknowledgeApi.acknowledge_edifact"
      end
      if @api_client.config.client_side_validation && opts[:'read_mode'] && !['read_small', 'read_large'].include?(opts[:'read_mode'])
        fail ArgumentError, 'invalid value for "read_mode", must be one of read_small, read_large'
      end
      if @api_client.config.client_side_validation && opts[:'accept'] && !['application/json', 'application/xml'].include?(opts[:'accept'])
        fail ArgumentError, 'invalid value for "accept", must be one of application/json, application/xml'
      end
      if @api_client.config.client_side_validation && opts[:'decimal_point'] && !['.', ','].include?(opts[:'decimal_point'])
        fail ArgumentError, 'invalid value for "decimal_point", must be one of ., ,'
      end
      if @api_client.config.client_side_validation && opts[:'syntax_set'] && !['unoa', 'unob'].include?(opts[:'syntax_set'])
        fail ArgumentError, 'invalid value for "syntax_set", must be one of unoa, unob'
      end
      if @api_client.config.client_side_validation && opts[:'technical_ack'] && !['default', 'enforce', 'suppress'].include?(opts[:'technical_ack'])
        fail ArgumentError, 'invalid value for "technical_ack", must be one of default, enforce, suppress'
      end
      if @api_client.config.client_side_validation && opts[:'eancom_syntax'] && !['4', '3', 'older'].include?(opts[:'eancom_syntax'])
        fail ArgumentError, 'invalid value for "eancom_syntax", must be one of 4, 3, older'
      end
      # resource path
      local_var_path = '/acknowledge/edifact'

      # query parameters
      query_params = {}
      query_params[:'read_mode'] = opts[:'read_mode'] if !opts[:'read_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}
      form_params['edi_file'] = edi_file
      form_params['char_set'] = opts[:'char_set'] if !opts[:'char_set'].nil?
      form_params['continue_on_error'] = opts[:'continue_on_error'] if !opts[:'continue_on_error'].nil?
      form_params['skip_trailer_validation'] = opts[:'skip_trailer_validation'] if !opts[:'skip_trailer_validation'].nil?
      form_params['decimal_point'] = opts[:'decimal_point'] if !opts[:'decimal_point'].nil?
      form_params['syntax_set'] = opts[:'syntax_set'] if !opts[:'syntax_set'].nil?
      form_params['transaction_duplicate'] = opts[:'transaction_duplicate'] if !opts[:'transaction_duplicate'].nil?
      form_params['group_duplicate'] = opts[:'group_duplicate'] if !opts[:'group_duplicate'].nil?
      form_params['technical_ack'] = opts[:'technical_ack'] if !opts[:'technical_ack'].nil?
      form_params['generate_for_valid_transactions'] = opts[:'generate_for_valid_transactions'] if !opts[:'generate_for_valid_transactions'].nil?
      form_params['allow_partial'] = opts[:'allow_partial'] if !opts[:'allow_partial'].nil?
      form_params['transaction_control_number'] = opts[:'transaction_control_number'] if !opts[:'transaction_control_number'].nil?
      form_params['eancom_syntax'] = opts[:'eancom_syntax'] if !opts[:'eancom_syntax'].nil?
      form_params['include_transactions'] = opts[:'include_transactions'] if !opts[:'include_transactions'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EdiFabricWebApiModelsEdifactAcknowledgment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AcknowledgeApi#acknowledge_edifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param edi_file EDI file to translate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :read_mode  (default to read_small)
    # @option opts [String] :accept  (default to application/json)
    # @option opts [String] :char_set  (default to utf-8)
    # @option opts [BOOLEAN] :continue_on_error  (default to true)
    # @option opts [BOOLEAN] :skip_trailer_validation  (default to false)
    # @option opts [String] :syntax_set 
    # @option opts [BOOLEAN] :transaction_duplicate  (default to false)
    # @option opts [BOOLEAN] :group_duplicate  (default to false)
    # @option opts [String] :technical_ack  (default to default)
    # @option opts [BOOLEAN] :generate_for_valid_transactions  (default to false)
    # @option opts [BOOLEAN] :allow_partial  (default to false)
    # @option opts [Integer] :transaction_control_number  (default to 1)
    # @option opts [String] :ak901  (default to e)
    # @option opts [String] :ack_version  (default to 4010_997)
    # @option opts [BOOLEAN] :include_transactions  (default to false)
    # @return [Array<EdiFabricWebApiModelsX12Acknowledgment>]
    def acknowledge_x12(edi_file, opts = {})
      data, _status_code, _headers = acknowledge_x12_with_http_info(edi_file, opts)
      data
    end

    # @param edi_file EDI file to translate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :read_mode 
    # @option opts [String] :accept 
    # @option opts [String] :char_set 
    # @option opts [BOOLEAN] :continue_on_error 
    # @option opts [BOOLEAN] :skip_trailer_validation 
    # @option opts [String] :syntax_set 
    # @option opts [BOOLEAN] :transaction_duplicate 
    # @option opts [BOOLEAN] :group_duplicate 
    # @option opts [String] :technical_ack 
    # @option opts [BOOLEAN] :generate_for_valid_transactions 
    # @option opts [BOOLEAN] :allow_partial 
    # @option opts [Integer] :transaction_control_number 
    # @option opts [String] :ak901 
    # @option opts [String] :ack_version 
    # @option opts [BOOLEAN] :include_transactions 
    # @return [Array<(Array<EdiFabricWebApiModelsX12Acknowledgment>, Fixnum, Hash)>] Array<EdiFabricWebApiModelsX12Acknowledgment> data, response status code and response headers
    def acknowledge_x12_with_http_info(edi_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AcknowledgeApi.acknowledge_x12 ...'
      end
      # verify the required parameter 'edi_file' is set
      if @api_client.config.client_side_validation && edi_file.nil?
        fail ArgumentError, "Missing the required parameter 'edi_file' when calling AcknowledgeApi.acknowledge_x12"
      end
      if @api_client.config.client_side_validation && opts[:'read_mode'] && !['read_small', 'read_large'].include?(opts[:'read_mode'])
        fail ArgumentError, 'invalid value for "read_mode", must be one of read_small, read_large'
      end
      if @api_client.config.client_side_validation && opts[:'accept'] && !['application/json', 'application/xml'].include?(opts[:'accept'])
        fail ArgumentError, 'invalid value for "accept", must be one of application/json, application/xml'
      end
      if @api_client.config.client_side_validation && opts[:'syntax_set'] && !['basic', 'standard'].include?(opts[:'syntax_set'])
        fail ArgumentError, 'invalid value for "syntax_set", must be one of basic, standard'
      end
      if @api_client.config.client_side_validation && opts[:'technical_ack'] && !['default', 'enforce', 'suppress'].include?(opts[:'technical_ack'])
        fail ArgumentError, 'invalid value for "technical_ack", must be one of default, enforce, suppress'
      end
      if @api_client.config.client_side_validation && opts[:'ak901'] && !['p', 'e'].include?(opts[:'ak901'])
        fail ArgumentError, 'invalid value for "ak901", must be one of p, e'
      end
      if @api_client.config.client_side_validation && opts[:'ack_version'] && !['4010_997', '5010_997', '5010_999'].include?(opts[:'ack_version'])
        fail ArgumentError, 'invalid value for "ack_version", must be one of 4010_997, 5010_997, 5010_999'
      end
      # resource path
      local_var_path = '/acknowledge/x12'

      # query parameters
      query_params = {}
      query_params[:'read_mode'] = opts[:'read_mode'] if !opts[:'read_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}
      form_params['edi_file'] = edi_file
      form_params['char_set'] = opts[:'char_set'] if !opts[:'char_set'].nil?
      form_params['continue_on_error'] = opts[:'continue_on_error'] if !opts[:'continue_on_error'].nil?
      form_params['skip_trailer_validation'] = opts[:'skip_trailer_validation'] if !opts[:'skip_trailer_validation'].nil?
      form_params['syntax_set'] = opts[:'syntax_set'] if !opts[:'syntax_set'].nil?
      form_params['transaction_duplicate'] = opts[:'transaction_duplicate'] if !opts[:'transaction_duplicate'].nil?
      form_params['group_duplicate'] = opts[:'group_duplicate'] if !opts[:'group_duplicate'].nil?
      form_params['technical_ack'] = opts[:'technical_ack'] if !opts[:'technical_ack'].nil?
      form_params['generate_for_valid_transactions'] = opts[:'generate_for_valid_transactions'] if !opts[:'generate_for_valid_transactions'].nil?
      form_params['allow_partial'] = opts[:'allow_partial'] if !opts[:'allow_partial'].nil?
      form_params['transaction_control_number'] = opts[:'transaction_control_number'] if !opts[:'transaction_control_number'].nil?
      form_params['ak901'] = opts[:'ak901'] if !opts[:'ak901'].nil?
      form_params['ack_version'] = opts[:'ack_version'] if !opts[:'ack_version'].nil?
      form_params['include_transactions'] = opts[:'include_transactions'] if !opts[:'include_transactions'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EdiFabricWebApiModelsX12Acknowledgment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AcknowledgeApi#acknowledge_x12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
