=begin
#EdiFabric API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module SwaggerClient
  class GenerateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactGroup] :generate_edifact_group 
    # @return [File]
    def generate_edifact_group(opts = {})
      data, _status_code, _headers = generate_edifact_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactGroup] :generate_edifact_group 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_edifact_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_edifact_group ...'
      end
      # resource path
      local_var_path = '/generate/edifact-group'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_edifact_group'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_edifact_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactInterchange] :generate_edifact_interchange 
    # @return [File]
    def generate_edifact_interchange(opts = {})
      data, _status_code, _headers = generate_edifact_interchange_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactInterchange] :generate_edifact_interchange 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_edifact_interchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_edifact_interchange ...'
      end
      # resource path
      local_var_path = '/generate/edifact-interchange'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_edifact_interchange'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_edifact_interchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactTransactions] :generate_edifact_transactions 
    # @return [File]
    def generate_edifact_transactions(opts = {})
      data, _status_code, _headers = generate_edifact_transactions_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateEdifactTransactions] :generate_edifact_transactions 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_edifact_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_edifact_transactions ...'
      end
      # resource path
      local_var_path = '/generate/edifact-transactions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_edifact_transactions'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_edifact_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateGs] :generate_gs 
    # @return [File]
    def generate_gs(opts = {})
      data, _status_code, _headers = generate_gs_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateGs] :generate_gs 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_gs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_gs ...'
      end
      # resource path
      local_var_path = '/generate/gs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_gs'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_gs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateIsa] :generate_isa 
    # @return [File]
    def generate_isa(opts = {})
      data, _status_code, _headers = generate_isa_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateIsa] :generate_isa 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_isa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_isa ...'
      end
      # resource path
      local_var_path = '/generate/isa'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_isa'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_isa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateUnb] :generate_unb 
    # @return [File]
    def generate_unb(opts = {})
      data, _status_code, _headers = generate_unb_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateUnb] :generate_unb 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_unb_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_unb ...'
      end
      # resource path
      local_var_path = '/generate/unb'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_unb'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_unb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateUng] :generate_ung 
    # @return [File]
    def generate_ung(opts = {})
      data, _status_code, _headers = generate_ung_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateUng] :generate_ung 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_ung_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_ung ...'
      end
      # resource path
      local_var_path = '/generate/ung'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_ung'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_ung\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Group] :generate_x12_group 
    # @return [File]
    def generate_x12_group(opts = {})
      data, _status_code, _headers = generate_x12_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Group] :generate_x12_group 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_x12_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_x12_group ...'
      end
      # resource path
      local_var_path = '/generate/x12-group'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_x12_group'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_x12_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Interchange] :generate_x12_interchange 
    # @return [File]
    def generate_x12_interchange(opts = {})
      data, _status_code, _headers = generate_x12_interchange_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Interchange] :generate_x12_interchange 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_x12_interchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_x12_interchange ...'
      end
      # resource path
      local_var_path = '/generate/x12-interchange'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_x12_interchange'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_x12_interchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Transactions] :generate_x12_transactions 
    # @return [File]
    def generate_x12_transactions(opts = {})
      data, _status_code, _headers = generate_x12_transactions_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EdiFabricWebApiModelsGenerateX12Transactions] :generate_x12_transactions 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def generate_x12_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GenerateApi.generate_x12_transactions ...'
      end
      # resource path
      local_var_path = '/generate/x12-transactions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generate_x12_transactions'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GenerateApi#generate_x12_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
