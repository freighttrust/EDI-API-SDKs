=begin
#EdiFabric API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  class EdiFabricCoreModelEdiX12ISA
    attr_accessor :authorization_information_qualifier_1

    attr_accessor :authorization_information_2

    attr_accessor :security_information_qualifier_3

    attr_accessor :security_information_4

    attr_accessor :sender_id_qualifier_5

    attr_accessor :interchange_sender_id_6

    attr_accessor :receiver_id_qualifier_7

    attr_accessor :interchange_receiver_id_8

    attr_accessor :interchange_date_9

    attr_accessor :interchange_time_10

    attr_accessor :interchange_control_standards_identifier_11

    attr_accessor :interchange_control_version_number_12

    attr_accessor :interchange_control_number_13

    attr_accessor :acknowledgement_requested_14

    attr_accessor :usage_indicator_15

    attr_accessor :component_element_separator_16

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authorization_information_qualifier_1' => :'authorizationInformationQualifier_1',
        :'authorization_information_2' => :'authorizationInformation_2',
        :'security_information_qualifier_3' => :'securityInformationQualifier_3',
        :'security_information_4' => :'securityInformation_4',
        :'sender_id_qualifier_5' => :'senderIDQualifier_5',
        :'interchange_sender_id_6' => :'interchangeSenderID_6',
        :'receiver_id_qualifier_7' => :'receiverIDQualifier_7',
        :'interchange_receiver_id_8' => :'interchangeReceiverID_8',
        :'interchange_date_9' => :'interchangeDate_9',
        :'interchange_time_10' => :'interchangeTime_10',
        :'interchange_control_standards_identifier_11' => :'interchangeControlStandardsIdentifier_11',
        :'interchange_control_version_number_12' => :'interchangeControlVersionNumber_12',
        :'interchange_control_number_13' => :'interchangeControlNumber_13',
        :'acknowledgement_requested_14' => :'acknowledgementRequested_14',
        :'usage_indicator_15' => :'usageIndicator_15',
        :'component_element_separator_16' => :'componentElementSeparator_16'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'authorization_information_qualifier_1' => :'String',
        :'authorization_information_2' => :'String',
        :'security_information_qualifier_3' => :'String',
        :'security_information_4' => :'String',
        :'sender_id_qualifier_5' => :'String',
        :'interchange_sender_id_6' => :'String',
        :'receiver_id_qualifier_7' => :'String',
        :'interchange_receiver_id_8' => :'String',
        :'interchange_date_9' => :'String',
        :'interchange_time_10' => :'String',
        :'interchange_control_standards_identifier_11' => :'String',
        :'interchange_control_version_number_12' => :'String',
        :'interchange_control_number_13' => :'String',
        :'acknowledgement_requested_14' => :'String',
        :'usage_indicator_15' => :'String',
        :'component_element_separator_16' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'authorizationInformationQualifier_1')
        self.authorization_information_qualifier_1 = attributes[:'authorizationInformationQualifier_1']
      end

      if attributes.has_key?(:'authorizationInformation_2')
        self.authorization_information_2 = attributes[:'authorizationInformation_2']
      end

      if attributes.has_key?(:'securityInformationQualifier_3')
        self.security_information_qualifier_3 = attributes[:'securityInformationQualifier_3']
      end

      if attributes.has_key?(:'securityInformation_4')
        self.security_information_4 = attributes[:'securityInformation_4']
      end

      if attributes.has_key?(:'senderIDQualifier_5')
        self.sender_id_qualifier_5 = attributes[:'senderIDQualifier_5']
      end

      if attributes.has_key?(:'interchangeSenderID_6')
        self.interchange_sender_id_6 = attributes[:'interchangeSenderID_6']
      end

      if attributes.has_key?(:'receiverIDQualifier_7')
        self.receiver_id_qualifier_7 = attributes[:'receiverIDQualifier_7']
      end

      if attributes.has_key?(:'interchangeReceiverID_8')
        self.interchange_receiver_id_8 = attributes[:'interchangeReceiverID_8']
      end

      if attributes.has_key?(:'interchangeDate_9')
        self.interchange_date_9 = attributes[:'interchangeDate_9']
      end

      if attributes.has_key?(:'interchangeTime_10')
        self.interchange_time_10 = attributes[:'interchangeTime_10']
      end

      if attributes.has_key?(:'interchangeControlStandardsIdentifier_11')
        self.interchange_control_standards_identifier_11 = attributes[:'interchangeControlStandardsIdentifier_11']
      end

      if attributes.has_key?(:'interchangeControlVersionNumber_12')
        self.interchange_control_version_number_12 = attributes[:'interchangeControlVersionNumber_12']
      end

      if attributes.has_key?(:'interchangeControlNumber_13')
        self.interchange_control_number_13 = attributes[:'interchangeControlNumber_13']
      end

      if attributes.has_key?(:'acknowledgementRequested_14')
        self.acknowledgement_requested_14 = attributes[:'acknowledgementRequested_14']
      end

      if attributes.has_key?(:'usageIndicator_15')
        self.usage_indicator_15 = attributes[:'usageIndicator_15']
      end

      if attributes.has_key?(:'componentElementSeparator_16')
        self.component_element_separator_16 = attributes[:'componentElementSeparator_16']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authorization_information_qualifier_1 == o.authorization_information_qualifier_1 &&
          authorization_information_2 == o.authorization_information_2 &&
          security_information_qualifier_3 == o.security_information_qualifier_3 &&
          security_information_4 == o.security_information_4 &&
          sender_id_qualifier_5 == o.sender_id_qualifier_5 &&
          interchange_sender_id_6 == o.interchange_sender_id_6 &&
          receiver_id_qualifier_7 == o.receiver_id_qualifier_7 &&
          interchange_receiver_id_8 == o.interchange_receiver_id_8 &&
          interchange_date_9 == o.interchange_date_9 &&
          interchange_time_10 == o.interchange_time_10 &&
          interchange_control_standards_identifier_11 == o.interchange_control_standards_identifier_11 &&
          interchange_control_version_number_12 == o.interchange_control_version_number_12 &&
          interchange_control_number_13 == o.interchange_control_number_13 &&
          acknowledgement_requested_14 == o.acknowledgement_requested_14 &&
          usage_indicator_15 == o.usage_indicator_15 &&
          component_element_separator_16 == o.component_element_separator_16
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [authorization_information_qualifier_1, authorization_information_2, security_information_qualifier_3, security_information_4, sender_id_qualifier_5, interchange_sender_id_6, receiver_id_qualifier_7, interchange_receiver_id_8, interchange_date_9, interchange_time_10, interchange_control_standards_identifier_11, interchange_control_version_number_12, interchange_control_number_13, acknowledgement_requested_14, usage_indicator_15, component_element_separator_16].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
