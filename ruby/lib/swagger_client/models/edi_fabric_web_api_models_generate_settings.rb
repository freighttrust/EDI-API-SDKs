=begin
#EdiFabric API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  class EdiFabricWebApiModelsGenerateSettings
    attr_accessor :preserve_whitespace

    attr_accessor :auto_trailers

    attr_accessor :post_fix

    attr_accessor :segment_separator

    attr_accessor :component_data_element_separator

    attr_accessor :escape_character

    attr_accessor :data_element_separator

    attr_accessor :repetition_separator

    attr_accessor :decimal_point

    attr_accessor :syntax_set

    attr_accessor :char_set

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'preserve_whitespace' => :'preserve_whitespace',
        :'auto_trailers' => :'auto_trailers',
        :'post_fix' => :'post_fix',
        :'segment_separator' => :'segment_separator',
        :'component_data_element_separator' => :'component_data_element_separator',
        :'escape_character' => :'escape_character',
        :'data_element_separator' => :'data_element_separator',
        :'repetition_separator' => :'repetition_separator',
        :'decimal_point' => :'decimal_point',
        :'syntax_set' => :'syntax_set',
        :'char_set' => :'char_set'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'preserve_whitespace' => :'BOOLEAN',
        :'auto_trailers' => :'BOOLEAN',
        :'post_fix' => :'String',
        :'segment_separator' => :'String',
        :'component_data_element_separator' => :'String',
        :'escape_character' => :'String',
        :'data_element_separator' => :'String',
        :'repetition_separator' => :'String',
        :'decimal_point' => :'String',
        :'syntax_set' => :'String',
        :'char_set' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'preserve_whitespace')
        self.preserve_whitespace = attributes[:'preserve_whitespace']
      end

      if attributes.has_key?(:'auto_trailers')
        self.auto_trailers = attributes[:'auto_trailers']
      end

      if attributes.has_key?(:'post_fix')
        self.post_fix = attributes[:'post_fix']
      end

      if attributes.has_key?(:'segment_separator')
        self.segment_separator = attributes[:'segment_separator']
      end

      if attributes.has_key?(:'component_data_element_separator')
        self.component_data_element_separator = attributes[:'component_data_element_separator']
      end

      if attributes.has_key?(:'escape_character')
        self.escape_character = attributes[:'escape_character']
      end

      if attributes.has_key?(:'data_element_separator')
        self.data_element_separator = attributes[:'data_element_separator']
      end

      if attributes.has_key?(:'repetition_separator')
        self.repetition_separator = attributes[:'repetition_separator']
      end

      if attributes.has_key?(:'decimal_point')
        self.decimal_point = attributes[:'decimal_point']
      end

      if attributes.has_key?(:'syntax_set')
        self.syntax_set = attributes[:'syntax_set']
      end

      if attributes.has_key?(:'char_set')
        self.char_set = attributes[:'char_set']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          preserve_whitespace == o.preserve_whitespace &&
          auto_trailers == o.auto_trailers &&
          post_fix == o.post_fix &&
          segment_separator == o.segment_separator &&
          component_data_element_separator == o.component_data_element_separator &&
          escape_character == o.escape_character &&
          data_element_separator == o.data_element_separator &&
          repetition_separator == o.repetition_separator &&
          decimal_point == o.decimal_point &&
          syntax_set == o.syntax_set &&
          char_set == o.char_set
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [preserve_whitespace, auto_trailers, post_fix, segment_separator, component_data_element_separator, escape_character, data_element_separator, repetition_separator, decimal_point, syntax_set, char_set].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
