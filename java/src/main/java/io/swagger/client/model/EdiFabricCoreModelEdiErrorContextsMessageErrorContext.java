/*
 * EdiFabric API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.EdiFabricCoreModelEdiErrorContextsSegmentErrorContext;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EdiFabricCoreModelEdiErrorContextsMessageErrorContext
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-24T17:09:45.649Z")
public class EdiFabricCoreModelEdiErrorContextsMessageErrorContext {
  @SerializedName("name")
  private String name = null;

  @SerializedName("controlNumber")
  private String controlNumber = null;

  @SerializedName("version")
  private String version = null;

  /**
   * Gets or Sets codes
   */
  @JsonAdapter(CodesEnum.Adapter.class)
  public enum CodesEnum {
    TRANSACTIONSETNOTSUPPORTED("TransactionSetNotSupported"),
    
    MESSAGETRAILERMISSING("MessageTrailerMissing"),
    
    CONTROLNUMBERNOTMATCHING("ControlNumberNotMatching"),
    
    SEGMENTSCOUNTNOTMATCHING("SegmentsCountNotMatching"),
    
    MESSAGEWITHERRORS("MessageWithErrors"),
    
    MISSINGORINVALIDTRANSACTIONSET("MissingOrInvalidTransactionSet"),
    
    MISSINGORINVALIDCONTROLNUMBER("MissingOrInvalidControlNumber"),
    
    DUPLICATEMESSAGECONTROLNUMBER("DuplicateMessageControlNumber"),
    
    FUNCTIONALGROUPVERSIONNOTSUPPORTED("FunctionalGroupVersionNotSupported");

    private String value;

    CodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodesEnum fromValue(String text) {
      for (CodesEnum b : CodesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CodesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("codes")
  private List<CodesEnum> codes = null;

  @SerializedName("errors")
  private List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> errors = null;

  @SerializedName("hasErrors")
  private Boolean hasErrors = null;

  @SerializedName("message")
  private String message = null;

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext controlNumber(String controlNumber) {
    this.controlNumber = controlNumber;
    return this;
  }

   /**
   * Get controlNumber
   * @return controlNumber
  **/
  @ApiModelProperty(value = "")
  public String getControlNumber() {
    return controlNumber;
  }

  public void setControlNumber(String controlNumber) {
    this.controlNumber = controlNumber;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext codes(List<CodesEnum> codes) {
    this.codes = codes;
    return this;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext addCodesItem(CodesEnum codesItem) {
    if (this.codes == null) {
      this.codes = new ArrayList<CodesEnum>();
    }
    this.codes.add(codesItem);
    return this;
  }

   /**
   * Get codes
   * @return codes
  **/
  @ApiModelProperty(value = "")
  public List<CodesEnum> getCodes() {
    return codes;
  }

  public void setCodes(List<CodesEnum> codes) {
    this.codes = codes;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext errors(List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> errors) {
    this.errors = errors;
    return this;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext addErrorsItem(EdiFabricCoreModelEdiErrorContextsSegmentErrorContext errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @ApiModelProperty(value = "")
  public List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> getErrors() {
    return errors;
  }

  public void setErrors(List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> errors) {
    this.errors = errors;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext hasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
    return this;
  }

   /**
   * Get hasErrors
   * @return hasErrors
  **/
  @ApiModelProperty(value = "")
  public Boolean isHasErrors() {
    return hasErrors;
  }

  public void setHasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
  }

  public EdiFabricCoreModelEdiErrorContextsMessageErrorContext message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @ApiModelProperty(value = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdiFabricCoreModelEdiErrorContextsMessageErrorContext ediFabricCoreModelEdiErrorContextsMessageErrorContext = (EdiFabricCoreModelEdiErrorContextsMessageErrorContext) o;
    return Objects.equals(this.name, ediFabricCoreModelEdiErrorContextsMessageErrorContext.name) &&
        Objects.equals(this.controlNumber, ediFabricCoreModelEdiErrorContextsMessageErrorContext.controlNumber) &&
        Objects.equals(this.version, ediFabricCoreModelEdiErrorContextsMessageErrorContext.version) &&
        Objects.equals(this.codes, ediFabricCoreModelEdiErrorContextsMessageErrorContext.codes) &&
        Objects.equals(this.errors, ediFabricCoreModelEdiErrorContextsMessageErrorContext.errors) &&
        Objects.equals(this.hasErrors, ediFabricCoreModelEdiErrorContextsMessageErrorContext.hasErrors) &&
        Objects.equals(this.message, ediFabricCoreModelEdiErrorContextsMessageErrorContext.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, controlNumber, version, codes, errors, hasErrors, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdiFabricCoreModelEdiErrorContextsMessageErrorContext {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    controlNumber: ").append(toIndentedString(controlNumber)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    hasErrors: ").append(toIndentedString(hasErrors)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

