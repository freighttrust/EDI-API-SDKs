/*
 * EdiFabric API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EdiFabricCoreModelEdiEdifactUNB;
import io.swagger.client.model.EdiFabricCoreModelEdiEdifactUNG;
import io.swagger.client.model.EdiFabricCoreModelEdiErrorContextsMessageErrorContext;
import io.swagger.client.model.EdiFabricCoreModelEdiErrorContextsSegmentErrorContext;
import io.swagger.client.model.EdiFabricCoreModelEdiX12GS;
import io.swagger.client.model.EdiFabricCoreModelEdiX12ISA;
import io.swagger.client.model.EdiFabricWebApiModelsErrorDetails;
import io.swagger.client.model.EdiFabricWebApiModelsValidateEdi;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidateApi {
    private ApiClient apiClient;

    public ValidateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for validateGs
     * @param gs  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateGsCall(EdiFabricCoreModelEdiX12GS gs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gs;

        // create path and map variables
        String localVarPath = "/validate/gs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateGsValidateBeforeCall(EdiFabricCoreModelEdiX12GS gs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = validateGsCall(gs, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param gs  (optional)
     * @return List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> validateGs(EdiFabricCoreModelEdiX12GS gs) throws ApiException {
        ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> resp = validateGsWithHttpInfo(gs);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param gs  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> validateGsWithHttpInfo(EdiFabricCoreModelEdiX12GS gs) throws ApiException {
        com.squareup.okhttp.Call call = validateGsValidateBeforeCall(gs, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gs  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateGsAsync(EdiFabricCoreModelEdiX12GS gs, final ApiCallback<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateGsValidateBeforeCall(gs, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateIsa
     * @param isa  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateIsaCall(EdiFabricCoreModelEdiX12ISA isa, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = isa;

        // create path and map variables
        String localVarPath = "/validate/isa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateIsaValidateBeforeCall(EdiFabricCoreModelEdiX12ISA isa, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = validateIsaCall(isa, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param isa  (optional)
     * @return List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> validateIsa(EdiFabricCoreModelEdiX12ISA isa) throws ApiException {
        ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> resp = validateIsaWithHttpInfo(isa);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param isa  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> validateIsaWithHttpInfo(EdiFabricCoreModelEdiX12ISA isa) throws ApiException {
        com.squareup.okhttp.Call call = validateIsaValidateBeforeCall(isa, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param isa  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateIsaAsync(EdiFabricCoreModelEdiX12ISA isa, final ApiCallback<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateIsaValidateBeforeCall(isa, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateTransactions
     * @param validateEdi  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateTransactionsCall(EdiFabricWebApiModelsValidateEdi validateEdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validateEdi;

        // create path and map variables
        String localVarPath = "/validate/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateTransactionsValidateBeforeCall(EdiFabricWebApiModelsValidateEdi validateEdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = validateTransactionsCall(validateEdi, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param validateEdi  (optional)
     * @return EdiFabricCoreModelEdiErrorContextsMessageErrorContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdiFabricCoreModelEdiErrorContextsMessageErrorContext validateTransactions(EdiFabricWebApiModelsValidateEdi validateEdi) throws ApiException {
        ApiResponse<EdiFabricCoreModelEdiErrorContextsMessageErrorContext> resp = validateTransactionsWithHttpInfo(validateEdi);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param validateEdi  (optional)
     * @return ApiResponse&lt;EdiFabricCoreModelEdiErrorContextsMessageErrorContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdiFabricCoreModelEdiErrorContextsMessageErrorContext> validateTransactionsWithHttpInfo(EdiFabricWebApiModelsValidateEdi validateEdi) throws ApiException {
        com.squareup.okhttp.Call call = validateTransactionsValidateBeforeCall(validateEdi, null, null);
        Type localVarReturnType = new TypeToken<EdiFabricCoreModelEdiErrorContextsMessageErrorContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param validateEdi  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateTransactionsAsync(EdiFabricWebApiModelsValidateEdi validateEdi, final ApiCallback<EdiFabricCoreModelEdiErrorContextsMessageErrorContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateTransactionsValidateBeforeCall(validateEdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdiFabricCoreModelEdiErrorContextsMessageErrorContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateUnb
     * @param unb  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateUnbCall(EdiFabricCoreModelEdiEdifactUNB unb, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unb;

        // create path and map variables
        String localVarPath = "/validate/unb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateUnbValidateBeforeCall(EdiFabricCoreModelEdiEdifactUNB unb, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = validateUnbCall(unb, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param unb  (optional)
     * @return List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> validateUnb(EdiFabricCoreModelEdiEdifactUNB unb) throws ApiException {
        ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> resp = validateUnbWithHttpInfo(unb);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param unb  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> validateUnbWithHttpInfo(EdiFabricCoreModelEdiEdifactUNB unb) throws ApiException {
        com.squareup.okhttp.Call call = validateUnbValidateBeforeCall(unb, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param unb  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateUnbAsync(EdiFabricCoreModelEdiEdifactUNB unb, final ApiCallback<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateUnbValidateBeforeCall(unb, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateUng
     * @param ung  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateUngCall(EdiFabricCoreModelEdiEdifactUNG ung, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ung;

        // create path and map variables
        String localVarPath = "/validate/ung";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateUngValidateBeforeCall(EdiFabricCoreModelEdiEdifactUNG ung, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = validateUngCall(ung, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ung  (optional)
     * @return List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext> validateUng(EdiFabricCoreModelEdiEdifactUNG ung) throws ApiException {
        ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> resp = validateUngWithHttpInfo(ung);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ung  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricCoreModelEdiErrorContextsSegmentErrorContext&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> validateUngWithHttpInfo(EdiFabricCoreModelEdiEdifactUNG ung) throws ApiException {
        com.squareup.okhttp.Call call = validateUngValidateBeforeCall(ung, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ung  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateUngAsync(EdiFabricCoreModelEdiEdifactUNG ung, final ApiCallback<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateUngValidateBeforeCall(ung, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricCoreModelEdiErrorContextsSegmentErrorContext>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
