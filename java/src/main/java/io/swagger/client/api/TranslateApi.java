/*
 * EdiFabric API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EdiFabricWebApiModelsEdifactInterchange;
import io.swagger.client.model.EdiFabricWebApiModelsErrorDetails;
import io.swagger.client.model.EdiFabricWebApiModelsX12Interchange;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranslateApi {
    private ApiClient apiClient;

    public TranslateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranslateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for translateEdifact
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to +)
     * @param componentDataElementSeparator  (optional, default to :)
     * @param segmentSeparator  (optional, default to ')
     * @param repetitionSeparator  (optional, default to *)
     * @param escapeCharacter  (optional, default to ?)
     * @param decimalPoint  (optional, default to .)
     * @param eancomSyntax  (optional)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call translateEdifactCall(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, String escapeCharacter, String decimalPoint, String eancomSyntax, Boolean skipTrailerValidation, String syntaxSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/edifact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (readMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("read_mode", readMode));
        if (validate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate", validate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (charSet != null)
        localVarFormParams.put("char_set", charSet);
        if (continueOnError != null)
        localVarFormParams.put("continue_on_error", continueOnError);
        if (transactionOnly != null)
        localVarFormParams.put("transaction_only", transactionOnly);
        if (dataElementSeparator != null)
        localVarFormParams.put("data_element_separator", dataElementSeparator);
        if (componentDataElementSeparator != null)
        localVarFormParams.put("component_data_element_separator", componentDataElementSeparator);
        if (segmentSeparator != null)
        localVarFormParams.put("segment_separator", segmentSeparator);
        if (repetitionSeparator != null)
        localVarFormParams.put("repetition_separator", repetitionSeparator);
        if (escapeCharacter != null)
        localVarFormParams.put("escape_character", escapeCharacter);
        if (decimalPoint != null)
        localVarFormParams.put("decimal_point", decimalPoint);
        if (eancomSyntax != null)
        localVarFormParams.put("eancom_syntax", eancomSyntax);
        if (skipTrailerValidation != null)
        localVarFormParams.put("skip_trailer_validation", skipTrailerValidation);
        if (syntaxSet != null)
        localVarFormParams.put("syntax_set", syntaxSet);
        if (ediFile != null)
        localVarFormParams.put("edi_file", ediFile);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call translateEdifactValidateBeforeCall(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, String escapeCharacter, String decimalPoint, String eancomSyntax, Boolean skipTrailerValidation, String syntaxSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediFile' is set
        if (ediFile == null) {
            throw new ApiException("Missing the required parameter 'ediFile' when calling translateEdifact(Async)");
        }
        

        com.squareup.okhttp.Call call = translateEdifactCall(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to +)
     * @param componentDataElementSeparator  (optional, default to :)
     * @param segmentSeparator  (optional, default to ')
     * @param repetitionSeparator  (optional, default to *)
     * @param escapeCharacter  (optional, default to ?)
     * @param decimalPoint  (optional, default to .)
     * @param eancomSyntax  (optional)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @return List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricWebApiModelsEdifactInterchange> translateEdifact(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, String escapeCharacter, String decimalPoint, String eancomSyntax, Boolean skipTrailerValidation, String syntaxSet) throws ApiException {
        ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>> resp = translateEdifactWithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to +)
     * @param componentDataElementSeparator  (optional, default to :)
     * @param segmentSeparator  (optional, default to ')
     * @param repetitionSeparator  (optional, default to *)
     * @param escapeCharacter  (optional, default to ?)
     * @param decimalPoint  (optional, default to .)
     * @param eancomSyntax  (optional)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>> translateEdifactWithHttpInfo(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, String escapeCharacter, String decimalPoint, String eancomSyntax, Boolean skipTrailerValidation, String syntaxSet) throws ApiException {
        com.squareup.okhttp.Call call = translateEdifactValidateBeforeCall(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricWebApiModelsEdifactInterchange>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to +)
     * @param componentDataElementSeparator  (optional, default to :)
     * @param segmentSeparator  (optional, default to ')
     * @param repetitionSeparator  (optional, default to *)
     * @param escapeCharacter  (optional, default to ?)
     * @param decimalPoint  (optional, default to .)
     * @param eancomSyntax  (optional)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call translateEdifactAsync(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, String escapeCharacter, String decimalPoint, String eancomSyntax, Boolean skipTrailerValidation, String syntaxSet, final ApiCallback<List<EdiFabricWebApiModelsEdifactInterchange>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = translateEdifactValidateBeforeCall(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricWebApiModelsEdifactInterchange>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for translateX12
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to *)
     * @param componentDataElementSeparator  (optional, default to >)
     * @param segmentSeparator  (optional, default to ~)
     * @param repetitionSeparator  (optional, default to ^)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call translateX12Call(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, Boolean skipTrailerValidation, String syntaxSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/x12";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (readMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("read_mode", readMode));
        if (validate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate", validate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (charSet != null)
        localVarFormParams.put("char_set", charSet);
        if (continueOnError != null)
        localVarFormParams.put("continue_on_error", continueOnError);
        if (transactionOnly != null)
        localVarFormParams.put("transaction_only", transactionOnly);
        if (dataElementSeparator != null)
        localVarFormParams.put("data_element_separator", dataElementSeparator);
        if (componentDataElementSeparator != null)
        localVarFormParams.put("component_data_element_separator", componentDataElementSeparator);
        if (segmentSeparator != null)
        localVarFormParams.put("segment_separator", segmentSeparator);
        if (repetitionSeparator != null)
        localVarFormParams.put("repetition_separator", repetitionSeparator);
        if (skipTrailerValidation != null)
        localVarFormParams.put("skip_trailer_validation", skipTrailerValidation);
        if (syntaxSet != null)
        localVarFormParams.put("syntax_set", syntaxSet);
        if (ediFile != null)
        localVarFormParams.put("edi_file", ediFile);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call translateX12ValidateBeforeCall(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, Boolean skipTrailerValidation, String syntaxSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediFile' is set
        if (ediFile == null) {
            throw new ApiException("Missing the required parameter 'ediFile' when calling translateX12(Async)");
        }
        

        com.squareup.okhttp.Call call = translateX12Call(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to *)
     * @param componentDataElementSeparator  (optional, default to >)
     * @param segmentSeparator  (optional, default to ~)
     * @param repetitionSeparator  (optional, default to ^)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @return List&lt;EdiFabricWebApiModelsX12Interchange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiFabricWebApiModelsX12Interchange> translateX12(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, Boolean skipTrailerValidation, String syntaxSet) throws ApiException {
        ApiResponse<List<EdiFabricWebApiModelsX12Interchange>> resp = translateX12WithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to *)
     * @param componentDataElementSeparator  (optional, default to >)
     * @param segmentSeparator  (optional, default to ~)
     * @param repetitionSeparator  (optional, default to ^)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @return ApiResponse&lt;List&lt;EdiFabricWebApiModelsX12Interchange&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiFabricWebApiModelsX12Interchange>> translateX12WithHttpInfo(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, Boolean skipTrailerValidation, String syntaxSet) throws ApiException {
        com.squareup.okhttp.Call call = translateX12ValidateBeforeCall(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet, null, null);
        Type localVarReturnType = new TypeToken<List<EdiFabricWebApiModelsX12Interchange>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ediFile EDI file to translate (required)
     * @param readMode  (optional, default to read_small)
     * @param validate  (optional, default to false)
     * @param accept  (optional, default to application/json)
     * @param charSet  (optional, default to utf-8)
     * @param continueOnError  (optional, default to true)
     * @param transactionOnly  (optional, default to false)
     * @param dataElementSeparator  (optional, default to *)
     * @param componentDataElementSeparator  (optional, default to >)
     * @param segmentSeparator  (optional, default to ~)
     * @param repetitionSeparator  (optional, default to ^)
     * @param skipTrailerValidation  (optional, default to false)
     * @param syntaxSet  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call translateX12Async(File ediFile, String readMode, Boolean validate, String accept, String charSet, Boolean continueOnError, Boolean transactionOnly, String dataElementSeparator, String componentDataElementSeparator, String segmentSeparator, String repetitionSeparator, Boolean skipTrailerValidation, String syntaxSet, final ApiCallback<List<EdiFabricWebApiModelsX12Interchange>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = translateX12ValidateBeforeCall(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiFabricWebApiModelsX12Interchange>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
