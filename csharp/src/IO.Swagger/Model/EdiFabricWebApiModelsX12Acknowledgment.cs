/* 
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EdiFabricWebApiModelsX12Acknowledgment
    /// </summary>
    [DataContract]
    public partial class EdiFabricWebApiModelsX12Acknowledgment :  IEquatable<EdiFabricWebApiModelsX12Acknowledgment>, IValidatableObject
    {
        /// <summary>
        /// Defines AckType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AckTypeEnum
        {
            
            /// <summary>
            /// Enum Technical for value: Technical
            /// </summary>
            [EnumMember(Value = "Technical")]
            Technical = 1,
            
            /// <summary>
            /// Enum Functional for value: Functional
            /// </summary>
            [EnumMember(Value = "Functional")]
            Functional = 2,
            
            /// <summary>
            /// Enum Implementation for value: Implementation
            /// </summary>
            [EnumMember(Value = "Implementation")]
            Implementation = 3
        }

        /// <summary>
        /// Gets or Sets AckType
        /// </summary>
        [DataMember(Name="ackType", EmitDefaultValue=false)]
        public AckTypeEnum? AckType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdiFabricWebApiModelsX12Acknowledgment" /> class.
        /// </summary>
        /// <param name="originalIsa">originalIsa.</param>
        /// <param name="originalGs">originalGs.</param>
        /// <param name="ackType">ackType.</param>
        /// <param name="ack">ack.</param>
        /// <param name="originalTransactions">originalTransactions.</param>
        public EdiFabricWebApiModelsX12Acknowledgment(EdiFabricCoreModelEdiX12ISA originalIsa = default(EdiFabricCoreModelEdiX12ISA), EdiFabricCoreModelEdiX12GS originalGs = default(EdiFabricCoreModelEdiX12GS), AckTypeEnum? ackType = default(AckTypeEnum?), EdiFabricCoreModelEdiEdiMessage ack = default(EdiFabricCoreModelEdiEdiMessage), List<EdiFabricCoreModelEdiEdiMessage> originalTransactions = default(List<EdiFabricCoreModelEdiEdiMessage>))
        {
            this.OriginalIsa = originalIsa;
            this.OriginalGs = originalGs;
            this.AckType = ackType;
            this.Ack = ack;
            this.OriginalTransactions = originalTransactions;
        }
        
        /// <summary>
        /// Gets or Sets OriginalIsa
        /// </summary>
        [DataMember(Name="originalIsa", EmitDefaultValue=false)]
        public EdiFabricCoreModelEdiX12ISA OriginalIsa { get; set; }

        /// <summary>
        /// Gets or Sets OriginalGs
        /// </summary>
        [DataMember(Name="originalGs", EmitDefaultValue=false)]
        public EdiFabricCoreModelEdiX12GS OriginalGs { get; set; }


        /// <summary>
        /// Gets or Sets Ack
        /// </summary>
        [DataMember(Name="ack", EmitDefaultValue=false)]
        public EdiFabricCoreModelEdiEdiMessage Ack { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTransactions
        /// </summary>
        [DataMember(Name="originalTransactions", EmitDefaultValue=false)]
        public List<EdiFabricCoreModelEdiEdiMessage> OriginalTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdiFabricWebApiModelsX12Acknowledgment {\n");
            sb.Append("  OriginalIsa: ").Append(OriginalIsa).Append("\n");
            sb.Append("  OriginalGs: ").Append(OriginalGs).Append("\n");
            sb.Append("  AckType: ").Append(AckType).Append("\n");
            sb.Append("  Ack: ").Append(Ack).Append("\n");
            sb.Append("  OriginalTransactions: ").Append(OriginalTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdiFabricWebApiModelsX12Acknowledgment);
        }

        /// <summary>
        /// Returns true if EdiFabricWebApiModelsX12Acknowledgment instances are equal
        /// </summary>
        /// <param name="input">Instance of EdiFabricWebApiModelsX12Acknowledgment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdiFabricWebApiModelsX12Acknowledgment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalIsa == input.OriginalIsa ||
                    (this.OriginalIsa != null &&
                    this.OriginalIsa.Equals(input.OriginalIsa))
                ) && 
                (
                    this.OriginalGs == input.OriginalGs ||
                    (this.OriginalGs != null &&
                    this.OriginalGs.Equals(input.OriginalGs))
                ) && 
                (
                    this.AckType == input.AckType ||
                    (this.AckType != null &&
                    this.AckType.Equals(input.AckType))
                ) && 
                (
                    this.Ack == input.Ack ||
                    (this.Ack != null &&
                    this.Ack.Equals(input.Ack))
                ) && 
                (
                    this.OriginalTransactions == input.OriginalTransactions ||
                    this.OriginalTransactions != null &&
                    this.OriginalTransactions.SequenceEqual(input.OriginalTransactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalIsa != null)
                    hashCode = hashCode * 59 + this.OriginalIsa.GetHashCode();
                if (this.OriginalGs != null)
                    hashCode = hashCode * 59 + this.OriginalGs.GetHashCode();
                if (this.AckType != null)
                    hashCode = hashCode * 59 + this.AckType.GetHashCode();
                if (this.Ack != null)
                    hashCode = hashCode * 59 + this.Ack.GetHashCode();
                if (this.OriginalTransactions != null)
                    hashCode = hashCode * 59 + this.OriginalTransactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
