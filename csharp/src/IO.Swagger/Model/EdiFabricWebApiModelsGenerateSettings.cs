/* 
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EdiFabricWebApiModelsGenerateSettings
    /// </summary>
    [DataContract]
    public partial class EdiFabricWebApiModelsGenerateSettings :  IEquatable<EdiFabricWebApiModelsGenerateSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdiFabricWebApiModelsGenerateSettings" /> class.
        /// </summary>
        /// <param name="preserveWhitespace">preserveWhitespace.</param>
        /// <param name="autoTrailers">autoTrailers.</param>
        /// <param name="postFix">postFix.</param>
        /// <param name="segmentSeparator">segmentSeparator.</param>
        /// <param name="componentDataElementSeparator">componentDataElementSeparator.</param>
        /// <param name="escapeCharacter">escapeCharacter.</param>
        /// <param name="dataElementSeparator">dataElementSeparator.</param>
        /// <param name="repetitionSeparator">repetitionSeparator.</param>
        /// <param name="decimalPoint">decimalPoint.</param>
        /// <param name="syntaxSet">syntaxSet.</param>
        /// <param name="charSet">charSet.</param>
        public EdiFabricWebApiModelsGenerateSettings(bool? preserveWhitespace = default(bool?), bool? autoTrailers = default(bool?), string postFix = default(string), string segmentSeparator = default(string), string componentDataElementSeparator = default(string), string escapeCharacter = default(string), string dataElementSeparator = default(string), string repetitionSeparator = default(string), string decimalPoint = default(string), string syntaxSet = default(string), string charSet = default(string))
        {
            this.PreserveWhitespace = preserveWhitespace;
            this.AutoTrailers = autoTrailers;
            this.PostFix = postFix;
            this.SegmentSeparator = segmentSeparator;
            this.ComponentDataElementSeparator = componentDataElementSeparator;
            this.EscapeCharacter = escapeCharacter;
            this.DataElementSeparator = dataElementSeparator;
            this.RepetitionSeparator = repetitionSeparator;
            this.DecimalPoint = decimalPoint;
            this.SyntaxSet = syntaxSet;
            this.CharSet = charSet;
        }
        
        /// <summary>
        /// Gets or Sets PreserveWhitespace
        /// </summary>
        [DataMember(Name="preserve_whitespace", EmitDefaultValue=false)]
        public bool? PreserveWhitespace { get; set; }

        /// <summary>
        /// Gets or Sets AutoTrailers
        /// </summary>
        [DataMember(Name="auto_trailers", EmitDefaultValue=false)]
        public bool? AutoTrailers { get; set; }

        /// <summary>
        /// Gets or Sets PostFix
        /// </summary>
        [DataMember(Name="post_fix", EmitDefaultValue=false)]
        public string PostFix { get; set; }

        /// <summary>
        /// Gets or Sets SegmentSeparator
        /// </summary>
        [DataMember(Name="segment_separator", EmitDefaultValue=false)]
        public string SegmentSeparator { get; set; }

        /// <summary>
        /// Gets or Sets ComponentDataElementSeparator
        /// </summary>
        [DataMember(Name="component_data_element_separator", EmitDefaultValue=false)]
        public string ComponentDataElementSeparator { get; set; }

        /// <summary>
        /// Gets or Sets EscapeCharacter
        /// </summary>
        [DataMember(Name="escape_character", EmitDefaultValue=false)]
        public string EscapeCharacter { get; set; }

        /// <summary>
        /// Gets or Sets DataElementSeparator
        /// </summary>
        [DataMember(Name="data_element_separator", EmitDefaultValue=false)]
        public string DataElementSeparator { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionSeparator
        /// </summary>
        [DataMember(Name="repetition_separator", EmitDefaultValue=false)]
        public string RepetitionSeparator { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPoint
        /// </summary>
        [DataMember(Name="decimal_point", EmitDefaultValue=false)]
        public string DecimalPoint { get; set; }

        /// <summary>
        /// Gets or Sets SyntaxSet
        /// </summary>
        [DataMember(Name="syntax_set", EmitDefaultValue=false)]
        public string SyntaxSet { get; set; }

        /// <summary>
        /// Gets or Sets CharSet
        /// </summary>
        [DataMember(Name="char_set", EmitDefaultValue=false)]
        public string CharSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdiFabricWebApiModelsGenerateSettings {\n");
            sb.Append("  PreserveWhitespace: ").Append(PreserveWhitespace).Append("\n");
            sb.Append("  AutoTrailers: ").Append(AutoTrailers).Append("\n");
            sb.Append("  PostFix: ").Append(PostFix).Append("\n");
            sb.Append("  SegmentSeparator: ").Append(SegmentSeparator).Append("\n");
            sb.Append("  ComponentDataElementSeparator: ").Append(ComponentDataElementSeparator).Append("\n");
            sb.Append("  EscapeCharacter: ").Append(EscapeCharacter).Append("\n");
            sb.Append("  DataElementSeparator: ").Append(DataElementSeparator).Append("\n");
            sb.Append("  RepetitionSeparator: ").Append(RepetitionSeparator).Append("\n");
            sb.Append("  DecimalPoint: ").Append(DecimalPoint).Append("\n");
            sb.Append("  SyntaxSet: ").Append(SyntaxSet).Append("\n");
            sb.Append("  CharSet: ").Append(CharSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdiFabricWebApiModelsGenerateSettings);
        }

        /// <summary>
        /// Returns true if EdiFabricWebApiModelsGenerateSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EdiFabricWebApiModelsGenerateSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdiFabricWebApiModelsGenerateSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PreserveWhitespace == input.PreserveWhitespace ||
                    (this.PreserveWhitespace != null &&
                    this.PreserveWhitespace.Equals(input.PreserveWhitespace))
                ) && 
                (
                    this.AutoTrailers == input.AutoTrailers ||
                    (this.AutoTrailers != null &&
                    this.AutoTrailers.Equals(input.AutoTrailers))
                ) && 
                (
                    this.PostFix == input.PostFix ||
                    (this.PostFix != null &&
                    this.PostFix.Equals(input.PostFix))
                ) && 
                (
                    this.SegmentSeparator == input.SegmentSeparator ||
                    (this.SegmentSeparator != null &&
                    this.SegmentSeparator.Equals(input.SegmentSeparator))
                ) && 
                (
                    this.ComponentDataElementSeparator == input.ComponentDataElementSeparator ||
                    (this.ComponentDataElementSeparator != null &&
                    this.ComponentDataElementSeparator.Equals(input.ComponentDataElementSeparator))
                ) && 
                (
                    this.EscapeCharacter == input.EscapeCharacter ||
                    (this.EscapeCharacter != null &&
                    this.EscapeCharacter.Equals(input.EscapeCharacter))
                ) && 
                (
                    this.DataElementSeparator == input.DataElementSeparator ||
                    (this.DataElementSeparator != null &&
                    this.DataElementSeparator.Equals(input.DataElementSeparator))
                ) && 
                (
                    this.RepetitionSeparator == input.RepetitionSeparator ||
                    (this.RepetitionSeparator != null &&
                    this.RepetitionSeparator.Equals(input.RepetitionSeparator))
                ) && 
                (
                    this.DecimalPoint == input.DecimalPoint ||
                    (this.DecimalPoint != null &&
                    this.DecimalPoint.Equals(input.DecimalPoint))
                ) && 
                (
                    this.SyntaxSet == input.SyntaxSet ||
                    (this.SyntaxSet != null &&
                    this.SyntaxSet.Equals(input.SyntaxSet))
                ) && 
                (
                    this.CharSet == input.CharSet ||
                    (this.CharSet != null &&
                    this.CharSet.Equals(input.CharSet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreserveWhitespace != null)
                    hashCode = hashCode * 59 + this.PreserveWhitespace.GetHashCode();
                if (this.AutoTrailers != null)
                    hashCode = hashCode * 59 + this.AutoTrailers.GetHashCode();
                if (this.PostFix != null)
                    hashCode = hashCode * 59 + this.PostFix.GetHashCode();
                if (this.SegmentSeparator != null)
                    hashCode = hashCode * 59 + this.SegmentSeparator.GetHashCode();
                if (this.ComponentDataElementSeparator != null)
                    hashCode = hashCode * 59 + this.ComponentDataElementSeparator.GetHashCode();
                if (this.EscapeCharacter != null)
                    hashCode = hashCode * 59 + this.EscapeCharacter.GetHashCode();
                if (this.DataElementSeparator != null)
                    hashCode = hashCode * 59 + this.DataElementSeparator.GetHashCode();
                if (this.RepetitionSeparator != null)
                    hashCode = hashCode * 59 + this.RepetitionSeparator.GetHashCode();
                if (this.DecimalPoint != null)
                    hashCode = hashCode * 59 + this.DecimalPoint.GetHashCode();
                if (this.SyntaxSet != null)
                    hashCode = hashCode * 59 + this.SyntaxSet.GetHashCode();
                if (this.CharSet != null)
                    hashCode = hashCode * 59 + this.CharSet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
