/* 
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EdiFabricCoreModelEdiEdifactS001
    /// </summary>
    [DataContract]
    public partial class EdiFabricCoreModelEdiEdifactS001 :  IEquatable<EdiFabricCoreModelEdiEdifactS001>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdiFabricCoreModelEdiEdifactS001" /> class.
        /// </summary>
        /// <param name="syntaxIdentifier1">syntaxIdentifier1.</param>
        /// <param name="syntaxVersionNumber2">syntaxVersionNumber2.</param>
        /// <param name="serviceCodeListDirectoryVersionNumber3">serviceCodeListDirectoryVersionNumber3.</param>
        /// <param name="characterEncoding4">characterEncoding4.</param>
        public EdiFabricCoreModelEdiEdifactS001(string syntaxIdentifier1 = default(string), string syntaxVersionNumber2 = default(string), string serviceCodeListDirectoryVersionNumber3 = default(string), string characterEncoding4 = default(string))
        {
            this.SyntaxIdentifier1 = syntaxIdentifier1;
            this.SyntaxVersionNumber2 = syntaxVersionNumber2;
            this.ServiceCodeListDirectoryVersionNumber3 = serviceCodeListDirectoryVersionNumber3;
            this.CharacterEncoding4 = characterEncoding4;
        }
        
        /// <summary>
        /// Gets or Sets SyntaxIdentifier1
        /// </summary>
        [DataMember(Name="syntaxIdentifier_1", EmitDefaultValue=false)]
        public string SyntaxIdentifier1 { get; set; }

        /// <summary>
        /// Gets or Sets SyntaxVersionNumber2
        /// </summary>
        [DataMember(Name="syntaxVersionNumber_2", EmitDefaultValue=false)]
        public string SyntaxVersionNumber2 { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCodeListDirectoryVersionNumber3
        /// </summary>
        [DataMember(Name="serviceCodeListDirectoryVersionNumber_3", EmitDefaultValue=false)]
        public string ServiceCodeListDirectoryVersionNumber3 { get; set; }

        /// <summary>
        /// Gets or Sets CharacterEncoding4
        /// </summary>
        [DataMember(Name="characterEncoding_4", EmitDefaultValue=false)]
        public string CharacterEncoding4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdiFabricCoreModelEdiEdifactS001 {\n");
            sb.Append("  SyntaxIdentifier1: ").Append(SyntaxIdentifier1).Append("\n");
            sb.Append("  SyntaxVersionNumber2: ").Append(SyntaxVersionNumber2).Append("\n");
            sb.Append("  ServiceCodeListDirectoryVersionNumber3: ").Append(ServiceCodeListDirectoryVersionNumber3).Append("\n");
            sb.Append("  CharacterEncoding4: ").Append(CharacterEncoding4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdiFabricCoreModelEdiEdifactS001);
        }

        /// <summary>
        /// Returns true if EdiFabricCoreModelEdiEdifactS001 instances are equal
        /// </summary>
        /// <param name="input">Instance of EdiFabricCoreModelEdiEdifactS001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdiFabricCoreModelEdiEdifactS001 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SyntaxIdentifier1 == input.SyntaxIdentifier1 ||
                    (this.SyntaxIdentifier1 != null &&
                    this.SyntaxIdentifier1.Equals(input.SyntaxIdentifier1))
                ) && 
                (
                    this.SyntaxVersionNumber2 == input.SyntaxVersionNumber2 ||
                    (this.SyntaxVersionNumber2 != null &&
                    this.SyntaxVersionNumber2.Equals(input.SyntaxVersionNumber2))
                ) && 
                (
                    this.ServiceCodeListDirectoryVersionNumber3 == input.ServiceCodeListDirectoryVersionNumber3 ||
                    (this.ServiceCodeListDirectoryVersionNumber3 != null &&
                    this.ServiceCodeListDirectoryVersionNumber3.Equals(input.ServiceCodeListDirectoryVersionNumber3))
                ) && 
                (
                    this.CharacterEncoding4 == input.CharacterEncoding4 ||
                    (this.CharacterEncoding4 != null &&
                    this.CharacterEncoding4.Equals(input.CharacterEncoding4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SyntaxIdentifier1 != null)
                    hashCode = hashCode * 59 + this.SyntaxIdentifier1.GetHashCode();
                if (this.SyntaxVersionNumber2 != null)
                    hashCode = hashCode * 59 + this.SyntaxVersionNumber2.GetHashCode();
                if (this.ServiceCodeListDirectoryVersionNumber3 != null)
                    hashCode = hashCode * 59 + this.ServiceCodeListDirectoryVersionNumber3.GetHashCode();
                if (this.CharacterEncoding4 != null)
                    hashCode = hashCode * 59 + this.CharacterEncoding4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
