/* 
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranslateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        List<EdiFabricWebApiModelsEdifactInterchange> TranslateEdifact (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>> TranslateEdifactWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        List<EdiFabricWebApiModelsX12Interchange> TranslateX12 (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        ApiResponse<List<EdiFabricWebApiModelsX12Interchange>> TranslateX12WithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        System.Threading.Tasks.Task<List<EdiFabricWebApiModelsEdifactInterchange>> TranslateEdifactAsync (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>>> TranslateEdifactAsyncWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        System.Threading.Tasks.Task<List<EdiFabricWebApiModelsX12Interchange>> TranslateX12Async (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiFabricWebApiModelsX12Interchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdiFabricWebApiModelsX12Interchange>>> TranslateX12AsyncWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TranslateApi : ITranslateApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranslateApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TranslateApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        public List<EdiFabricWebApiModelsEdifactInterchange> TranslateEdifact (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
             ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>> localVarResponse = TranslateEdifactWithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        public ApiResponse< List<EdiFabricWebApiModelsEdifactInterchange> > TranslateEdifactWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
            // verify the required parameter 'ediFile' is set
            if (ediFile == null)
                throw new ApiException(400, "Missing required parameter 'ediFile' when calling TranslateApi->TranslateEdifact");

            var localVarPath = "/translate/edifact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_mode", readMode)); // query parameter
            if (validate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate", validate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (charSet != null) localVarFormParams.Add("char_set", this.Configuration.ApiClient.ParameterToString(charSet)); // form parameter
            if (continueOnError != null) localVarFormParams.Add("continue_on_error", this.Configuration.ApiClient.ParameterToString(continueOnError)); // form parameter
            if (transactionOnly != null) localVarFormParams.Add("transaction_only", this.Configuration.ApiClient.ParameterToString(transactionOnly)); // form parameter
            if (dataElementSeparator != null) localVarFormParams.Add("data_element_separator", this.Configuration.ApiClient.ParameterToString(dataElementSeparator)); // form parameter
            if (componentDataElementSeparator != null) localVarFormParams.Add("component_data_element_separator", this.Configuration.ApiClient.ParameterToString(componentDataElementSeparator)); // form parameter
            if (segmentSeparator != null) localVarFormParams.Add("segment_separator", this.Configuration.ApiClient.ParameterToString(segmentSeparator)); // form parameter
            if (repetitionSeparator != null) localVarFormParams.Add("repetition_separator", this.Configuration.ApiClient.ParameterToString(repetitionSeparator)); // form parameter
            if (escapeCharacter != null) localVarFormParams.Add("escape_character", this.Configuration.ApiClient.ParameterToString(escapeCharacter)); // form parameter
            if (decimalPoint != null) localVarFormParams.Add("decimal_point", this.Configuration.ApiClient.ParameterToString(decimalPoint)); // form parameter
            if (eancomSyntax != null) localVarFormParams.Add("eancom_syntax", this.Configuration.ApiClient.ParameterToString(eancomSyntax)); // form parameter
            if (skipTrailerValidation != null) localVarFormParams.Add("skip_trailer_validation", this.Configuration.ApiClient.ParameterToString(skipTrailerValidation)); // form parameter
            if (syntaxSet != null) localVarFormParams.Add("syntax_set", this.Configuration.ApiClient.ParameterToString(syntaxSet)); // form parameter
            if (ediFile != null) localVarFileParams.Add("edi_file", this.Configuration.ApiClient.ParameterToFile("edi_file", ediFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateEdifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiFabricWebApiModelsEdifactInterchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiFabricWebApiModelsEdifactInterchange>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdiFabricWebApiModelsEdifactInterchange>> TranslateEdifactAsync (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
             ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>> localVarResponse = await TranslateEdifactAsyncWithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, escapeCharacter, decimalPoint, eancomSyntax, skipTrailerValidation, syntaxSet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to +)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to :)</param>
        /// <param name="segmentSeparator"> (optional, default to &#39;)</param>
        /// <param name="repetitionSeparator"> (optional, default to *)</param>
        /// <param name="escapeCharacter"> (optional, default to ?)</param>
        /// <param name="decimalPoint"> (optional, default to .)</param>
        /// <param name="eancomSyntax"> (optional)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiFabricWebApiModelsEdifactInterchange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>>> TranslateEdifactAsyncWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, string escapeCharacter = null, string decimalPoint = null, string eancomSyntax = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
            // verify the required parameter 'ediFile' is set
            if (ediFile == null)
                throw new ApiException(400, "Missing required parameter 'ediFile' when calling TranslateApi->TranslateEdifact");

            var localVarPath = "/translate/edifact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_mode", readMode)); // query parameter
            if (validate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate", validate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (charSet != null) localVarFormParams.Add("char_set", this.Configuration.ApiClient.ParameterToString(charSet)); // form parameter
            if (continueOnError != null) localVarFormParams.Add("continue_on_error", this.Configuration.ApiClient.ParameterToString(continueOnError)); // form parameter
            if (transactionOnly != null) localVarFormParams.Add("transaction_only", this.Configuration.ApiClient.ParameterToString(transactionOnly)); // form parameter
            if (dataElementSeparator != null) localVarFormParams.Add("data_element_separator", this.Configuration.ApiClient.ParameterToString(dataElementSeparator)); // form parameter
            if (componentDataElementSeparator != null) localVarFormParams.Add("component_data_element_separator", this.Configuration.ApiClient.ParameterToString(componentDataElementSeparator)); // form parameter
            if (segmentSeparator != null) localVarFormParams.Add("segment_separator", this.Configuration.ApiClient.ParameterToString(segmentSeparator)); // form parameter
            if (repetitionSeparator != null) localVarFormParams.Add("repetition_separator", this.Configuration.ApiClient.ParameterToString(repetitionSeparator)); // form parameter
            if (escapeCharacter != null) localVarFormParams.Add("escape_character", this.Configuration.ApiClient.ParameterToString(escapeCharacter)); // form parameter
            if (decimalPoint != null) localVarFormParams.Add("decimal_point", this.Configuration.ApiClient.ParameterToString(decimalPoint)); // form parameter
            if (eancomSyntax != null) localVarFormParams.Add("eancom_syntax", this.Configuration.ApiClient.ParameterToString(eancomSyntax)); // form parameter
            if (skipTrailerValidation != null) localVarFormParams.Add("skip_trailer_validation", this.Configuration.ApiClient.ParameterToString(skipTrailerValidation)); // form parameter
            if (syntaxSet != null) localVarFormParams.Add("syntax_set", this.Configuration.ApiClient.ParameterToString(syntaxSet)); // form parameter
            if (ediFile != null) localVarFileParams.Add("edi_file", this.Configuration.ApiClient.ParameterToFile("edi_file", ediFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateEdifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiFabricWebApiModelsEdifactInterchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiFabricWebApiModelsEdifactInterchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiFabricWebApiModelsEdifactInterchange>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        public List<EdiFabricWebApiModelsX12Interchange> TranslateX12 (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
             ApiResponse<List<EdiFabricWebApiModelsX12Interchange>> localVarResponse = TranslateX12WithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        public ApiResponse< List<EdiFabricWebApiModelsX12Interchange> > TranslateX12WithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
            // verify the required parameter 'ediFile' is set
            if (ediFile == null)
                throw new ApiException(400, "Missing required parameter 'ediFile' when calling TranslateApi->TranslateX12");

            var localVarPath = "/translate/x12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_mode", readMode)); // query parameter
            if (validate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate", validate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (charSet != null) localVarFormParams.Add("char_set", this.Configuration.ApiClient.ParameterToString(charSet)); // form parameter
            if (continueOnError != null) localVarFormParams.Add("continue_on_error", this.Configuration.ApiClient.ParameterToString(continueOnError)); // form parameter
            if (transactionOnly != null) localVarFormParams.Add("transaction_only", this.Configuration.ApiClient.ParameterToString(transactionOnly)); // form parameter
            if (dataElementSeparator != null) localVarFormParams.Add("data_element_separator", this.Configuration.ApiClient.ParameterToString(dataElementSeparator)); // form parameter
            if (componentDataElementSeparator != null) localVarFormParams.Add("component_data_element_separator", this.Configuration.ApiClient.ParameterToString(componentDataElementSeparator)); // form parameter
            if (segmentSeparator != null) localVarFormParams.Add("segment_separator", this.Configuration.ApiClient.ParameterToString(segmentSeparator)); // form parameter
            if (repetitionSeparator != null) localVarFormParams.Add("repetition_separator", this.Configuration.ApiClient.ParameterToString(repetitionSeparator)); // form parameter
            if (skipTrailerValidation != null) localVarFormParams.Add("skip_trailer_validation", this.Configuration.ApiClient.ParameterToString(skipTrailerValidation)); // form parameter
            if (syntaxSet != null) localVarFormParams.Add("syntax_set", this.Configuration.ApiClient.ParameterToString(syntaxSet)); // form parameter
            if (ediFile != null) localVarFileParams.Add("edi_file", this.Configuration.ApiClient.ParameterToFile("edi_file", ediFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateX12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiFabricWebApiModelsX12Interchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiFabricWebApiModelsX12Interchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiFabricWebApiModelsX12Interchange>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of List&lt;EdiFabricWebApiModelsX12Interchange&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdiFabricWebApiModelsX12Interchange>> TranslateX12Async (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
             ApiResponse<List<EdiFabricWebApiModelsX12Interchange>> localVarResponse = await TranslateX12AsyncWithHttpInfo(ediFile, readMode, validate, accept, charSet, continueOnError, transactionOnly, dataElementSeparator, componentDataElementSeparator, segmentSeparator, repetitionSeparator, skipTrailerValidation, syntaxSet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediFile">EDI file to translate</param>
        /// <param name="readMode"> (optional, default to read_small)</param>
        /// <param name="validate"> (optional, default to false)</param>
        /// <param name="accept"> (optional, default to application/json)</param>
        /// <param name="charSet"> (optional, default to utf-8)</param>
        /// <param name="continueOnError"> (optional, default to true)</param>
        /// <param name="transactionOnly"> (optional, default to false)</param>
        /// <param name="dataElementSeparator"> (optional, default to *)</param>
        /// <param name="componentDataElementSeparator"> (optional, default to &gt;)</param>
        /// <param name="segmentSeparator"> (optional, default to ~)</param>
        /// <param name="repetitionSeparator"> (optional, default to ^)</param>
        /// <param name="skipTrailerValidation"> (optional, default to false)</param>
        /// <param name="syntaxSet"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiFabricWebApiModelsX12Interchange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdiFabricWebApiModelsX12Interchange>>> TranslateX12AsyncWithHttpInfo (System.IO.Stream ediFile, string readMode = null, bool? validate = null, string accept = null, string charSet = null, bool? continueOnError = null, bool? transactionOnly = null, string dataElementSeparator = null, string componentDataElementSeparator = null, string segmentSeparator = null, string repetitionSeparator = null, bool? skipTrailerValidation = null, string syntaxSet = null)
        {
            // verify the required parameter 'ediFile' is set
            if (ediFile == null)
                throw new ApiException(400, "Missing required parameter 'ediFile' when calling TranslateApi->TranslateX12");

            var localVarPath = "/translate/x12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_mode", readMode)); // query parameter
            if (validate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate", validate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (charSet != null) localVarFormParams.Add("char_set", this.Configuration.ApiClient.ParameterToString(charSet)); // form parameter
            if (continueOnError != null) localVarFormParams.Add("continue_on_error", this.Configuration.ApiClient.ParameterToString(continueOnError)); // form parameter
            if (transactionOnly != null) localVarFormParams.Add("transaction_only", this.Configuration.ApiClient.ParameterToString(transactionOnly)); // form parameter
            if (dataElementSeparator != null) localVarFormParams.Add("data_element_separator", this.Configuration.ApiClient.ParameterToString(dataElementSeparator)); // form parameter
            if (componentDataElementSeparator != null) localVarFormParams.Add("component_data_element_separator", this.Configuration.ApiClient.ParameterToString(componentDataElementSeparator)); // form parameter
            if (segmentSeparator != null) localVarFormParams.Add("segment_separator", this.Configuration.ApiClient.ParameterToString(segmentSeparator)); // form parameter
            if (repetitionSeparator != null) localVarFormParams.Add("repetition_separator", this.Configuration.ApiClient.ParameterToString(repetitionSeparator)); // form parameter
            if (skipTrailerValidation != null) localVarFormParams.Add("skip_trailer_validation", this.Configuration.ApiClient.ParameterToString(skipTrailerValidation)); // form parameter
            if (syntaxSet != null) localVarFormParams.Add("syntax_set", this.Configuration.ApiClient.ParameterToString(syntaxSet)); // form parameter
            if (ediFile != null) localVarFileParams.Add("edi_file", this.Configuration.ApiClient.ParameterToFile("edi_file", ediFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateX12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiFabricWebApiModelsX12Interchange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiFabricWebApiModelsX12Interchange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiFabricWebApiModelsX12Interchange>)));
        }

    }
}
