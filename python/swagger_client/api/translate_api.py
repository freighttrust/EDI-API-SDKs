# coding: utf-8

"""
    EdiFabric API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TranslateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def translate_edifact(self, edi_file, **kwargs):  # noqa: E501
        """translate_edifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_edifact(edi_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file edi_file: EDI file to translate (required)
        :param str read_mode:
        :param bool validate:
        :param str accept:
        :param str char_set:
        :param bool continue_on_error:
        :param bool transaction_only:
        :param str data_element_separator:
        :param str component_data_element_separator:
        :param str segment_separator:
        :param str repetition_separator:
        :param str escape_character:
        :param str decimal_point:
        :param str eancom_syntax:
        :param bool skip_trailer_validation:
        :param str syntax_set:
        :return: list[EdiFabricWebApiModelsEdifactInterchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.translate_edifact_with_http_info(edi_file, **kwargs)  # noqa: E501
        else:
            (data) = self.translate_edifact_with_http_info(edi_file, **kwargs)  # noqa: E501
            return data

    def translate_edifact_with_http_info(self, edi_file, **kwargs):  # noqa: E501
        """translate_edifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_edifact_with_http_info(edi_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file edi_file: EDI file to translate (required)
        :param str read_mode:
        :param bool validate:
        :param str accept:
        :param str char_set:
        :param bool continue_on_error:
        :param bool transaction_only:
        :param str data_element_separator:
        :param str component_data_element_separator:
        :param str segment_separator:
        :param str repetition_separator:
        :param str escape_character:
        :param str decimal_point:
        :param str eancom_syntax:
        :param bool skip_trailer_validation:
        :param str syntax_set:
        :return: list[EdiFabricWebApiModelsEdifactInterchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edi_file', 'read_mode', 'validate', 'accept', 'char_set', 'continue_on_error', 'transaction_only', 'data_element_separator', 'component_data_element_separator', 'segment_separator', 'repetition_separator', 'escape_character', 'decimal_point', 'eancom_syntax', 'skip_trailer_validation', 'syntax_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translate_edifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edi_file' is set
        if ('edi_file' not in params or
                params['edi_file'] is None):
            raise ValueError("Missing the required parameter `edi_file` when calling `translate_edifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'read_mode' in params:
            query_params.append(('read_mode', params['read_mode']))  # noqa: E501
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'char_set' in params:
            form_params.append(('char_set', params['char_set']))  # noqa: E501
        if 'continue_on_error' in params:
            form_params.append(('continue_on_error', params['continue_on_error']))  # noqa: E501
        if 'transaction_only' in params:
            form_params.append(('transaction_only', params['transaction_only']))  # noqa: E501
        if 'data_element_separator' in params:
            form_params.append(('data_element_separator', params['data_element_separator']))  # noqa: E501
        if 'component_data_element_separator' in params:
            form_params.append(('component_data_element_separator', params['component_data_element_separator']))  # noqa: E501
        if 'segment_separator' in params:
            form_params.append(('segment_separator', params['segment_separator']))  # noqa: E501
        if 'repetition_separator' in params:
            form_params.append(('repetition_separator', params['repetition_separator']))  # noqa: E501
        if 'escape_character' in params:
            form_params.append(('escape_character', params['escape_character']))  # noqa: E501
        if 'decimal_point' in params:
            form_params.append(('decimal_point', params['decimal_point']))  # noqa: E501
        if 'eancom_syntax' in params:
            form_params.append(('eancom_syntax', params['eancom_syntax']))  # noqa: E501
        if 'skip_trailer_validation' in params:
            form_params.append(('skip_trailer_validation', params['skip_trailer_validation']))  # noqa: E501
        if 'syntax_set' in params:
            form_params.append(('syntax_set', params['syntax_set']))  # noqa: E501
        if 'edi_file' in params:
            local_var_files['edi_file'] = params['edi_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/translate/edifact', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdiFabricWebApiModelsEdifactInterchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def translate_x12(self, edi_file, **kwargs):  # noqa: E501
        """translate_x12  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_x12(edi_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file edi_file: EDI file to translate (required)
        :param str read_mode:
        :param bool validate:
        :param str accept:
        :param str char_set:
        :param bool continue_on_error:
        :param bool transaction_only:
        :param str data_element_separator:
        :param str component_data_element_separator:
        :param str segment_separator:
        :param str repetition_separator:
        :param bool skip_trailer_validation:
        :param str syntax_set:
        :return: list[EdiFabricWebApiModelsX12Interchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.translate_x12_with_http_info(edi_file, **kwargs)  # noqa: E501
        else:
            (data) = self.translate_x12_with_http_info(edi_file, **kwargs)  # noqa: E501
            return data

    def translate_x12_with_http_info(self, edi_file, **kwargs):  # noqa: E501
        """translate_x12  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_x12_with_http_info(edi_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file edi_file: EDI file to translate (required)
        :param str read_mode:
        :param bool validate:
        :param str accept:
        :param str char_set:
        :param bool continue_on_error:
        :param bool transaction_only:
        :param str data_element_separator:
        :param str component_data_element_separator:
        :param str segment_separator:
        :param str repetition_separator:
        :param bool skip_trailer_validation:
        :param str syntax_set:
        :return: list[EdiFabricWebApiModelsX12Interchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edi_file', 'read_mode', 'validate', 'accept', 'char_set', 'continue_on_error', 'transaction_only', 'data_element_separator', 'component_data_element_separator', 'segment_separator', 'repetition_separator', 'skip_trailer_validation', 'syntax_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translate_x12" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edi_file' is set
        if ('edi_file' not in params or
                params['edi_file'] is None):
            raise ValueError("Missing the required parameter `edi_file` when calling `translate_x12`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'read_mode' in params:
            query_params.append(('read_mode', params['read_mode']))  # noqa: E501
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'char_set' in params:
            form_params.append(('char_set', params['char_set']))  # noqa: E501
        if 'continue_on_error' in params:
            form_params.append(('continue_on_error', params['continue_on_error']))  # noqa: E501
        if 'transaction_only' in params:
            form_params.append(('transaction_only', params['transaction_only']))  # noqa: E501
        if 'data_element_separator' in params:
            form_params.append(('data_element_separator', params['data_element_separator']))  # noqa: E501
        if 'component_data_element_separator' in params:
            form_params.append(('component_data_element_separator', params['component_data_element_separator']))  # noqa: E501
        if 'segment_separator' in params:
            form_params.append(('segment_separator', params['segment_separator']))  # noqa: E501
        if 'repetition_separator' in params:
            form_params.append(('repetition_separator', params['repetition_separator']))  # noqa: E501
        if 'skip_trailer_validation' in params:
            form_params.append(('skip_trailer_validation', params['skip_trailer_validation']))  # noqa: E501
        if 'syntax_set' in params:
            form_params.append(('syntax_set', params['syntax_set']))  # noqa: E501
        if 'edi_file' in params:
            local_var_files['edi_file'] = params['edi_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/translate/x12', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdiFabricWebApiModelsX12Interchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
