# coding: utf-8

"""
    EdiFabric API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdiFabricCoreModelEdiEdifactS001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syntax_identifier_1': 'str',
        'syntax_version_number_2': 'str',
        'service_code_list_directory_version_number_3': 'str',
        'character_encoding_4': 'str'
    }

    attribute_map = {
        'syntax_identifier_1': 'syntaxIdentifier_1',
        'syntax_version_number_2': 'syntaxVersionNumber_2',
        'service_code_list_directory_version_number_3': 'serviceCodeListDirectoryVersionNumber_3',
        'character_encoding_4': 'characterEncoding_4'
    }

    def __init__(self, syntax_identifier_1=None, syntax_version_number_2=None, service_code_list_directory_version_number_3=None, character_encoding_4=None):  # noqa: E501
        """EdiFabricCoreModelEdiEdifactS001 - a model defined in Swagger"""  # noqa: E501

        self._syntax_identifier_1 = None
        self._syntax_version_number_2 = None
        self._service_code_list_directory_version_number_3 = None
        self._character_encoding_4 = None
        self.discriminator = None

        if syntax_identifier_1 is not None:
            self.syntax_identifier_1 = syntax_identifier_1
        if syntax_version_number_2 is not None:
            self.syntax_version_number_2 = syntax_version_number_2
        if service_code_list_directory_version_number_3 is not None:
            self.service_code_list_directory_version_number_3 = service_code_list_directory_version_number_3
        if character_encoding_4 is not None:
            self.character_encoding_4 = character_encoding_4

    @property
    def syntax_identifier_1(self):
        """Gets the syntax_identifier_1 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501


        :return: The syntax_identifier_1 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :rtype: str
        """
        return self._syntax_identifier_1

    @syntax_identifier_1.setter
    def syntax_identifier_1(self, syntax_identifier_1):
        """Sets the syntax_identifier_1 of this EdiFabricCoreModelEdiEdifactS001.


        :param syntax_identifier_1: The syntax_identifier_1 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :type: str
        """

        self._syntax_identifier_1 = syntax_identifier_1

    @property
    def syntax_version_number_2(self):
        """Gets the syntax_version_number_2 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501


        :return: The syntax_version_number_2 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :rtype: str
        """
        return self._syntax_version_number_2

    @syntax_version_number_2.setter
    def syntax_version_number_2(self, syntax_version_number_2):
        """Sets the syntax_version_number_2 of this EdiFabricCoreModelEdiEdifactS001.


        :param syntax_version_number_2: The syntax_version_number_2 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :type: str
        """

        self._syntax_version_number_2 = syntax_version_number_2

    @property
    def service_code_list_directory_version_number_3(self):
        """Gets the service_code_list_directory_version_number_3 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501


        :return: The service_code_list_directory_version_number_3 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :rtype: str
        """
        return self._service_code_list_directory_version_number_3

    @service_code_list_directory_version_number_3.setter
    def service_code_list_directory_version_number_3(self, service_code_list_directory_version_number_3):
        """Sets the service_code_list_directory_version_number_3 of this EdiFabricCoreModelEdiEdifactS001.


        :param service_code_list_directory_version_number_3: The service_code_list_directory_version_number_3 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :type: str
        """

        self._service_code_list_directory_version_number_3 = service_code_list_directory_version_number_3

    @property
    def character_encoding_4(self):
        """Gets the character_encoding_4 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501


        :return: The character_encoding_4 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :rtype: str
        """
        return self._character_encoding_4

    @character_encoding_4.setter
    def character_encoding_4(self, character_encoding_4):
        """Sets the character_encoding_4 of this EdiFabricCoreModelEdiEdifactS001.


        :param character_encoding_4: The character_encoding_4 of this EdiFabricCoreModelEdiEdifactS001.  # noqa: E501
        :type: str
        """

        self._character_encoding_4 = character_encoding_4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdiFabricCoreModelEdiEdifactS001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdiFabricCoreModelEdiEdifactS001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
