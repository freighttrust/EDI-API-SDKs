# coding: utf-8

"""
    EdiFabric API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.edi_fabric_core_model_edi_error_contexts_message_error_context import EdiFabricCoreModelEdiErrorContextsMessageErrorContext  # noqa: F401,E501


class EdiFabricCoreModelEdiErrorContextsReaderErrorContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reader_error_code': 'str',
        'message_error_context': 'EdiFabricCoreModelEdiErrorContextsMessageErrorContext',
        'message': 'str'
    }

    attribute_map = {
        'reader_error_code': 'readerErrorCode',
        'message_error_context': 'messageErrorContext',
        'message': 'message'
    }

    def __init__(self, reader_error_code=None, message_error_context=None, message=None):  # noqa: E501
        """EdiFabricCoreModelEdiErrorContextsReaderErrorContext - a model defined in Swagger"""  # noqa: E501

        self._reader_error_code = None
        self._message_error_context = None
        self._message = None
        self.discriminator = None

        if reader_error_code is not None:
            self.reader_error_code = reader_error_code
        if message_error_context is not None:
            self.message_error_context = message_error_context
        if message is not None:
            self.message = message

    @property
    def reader_error_code(self):
        """Gets the reader_error_code of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501


        :return: The reader_error_code of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._reader_error_code

    @reader_error_code.setter
    def reader_error_code(self, reader_error_code):
        """Sets the reader_error_code of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.


        :param reader_error_code: The reader_error_code of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "InvalidSpecOrAssembly", "InvalidControlStructure", "ImproperEndOfFile", "InvalidInterchangeContent", "DemoVersion"]  # noqa: E501
        if reader_error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `reader_error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(reader_error_code, allowed_values)
            )

        self._reader_error_code = reader_error_code

    @property
    def message_error_context(self):
        """Gets the message_error_context of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501


        :return: The message_error_context of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :rtype: EdiFabricCoreModelEdiErrorContextsMessageErrorContext
        """
        return self._message_error_context

    @message_error_context.setter
    def message_error_context(self, message_error_context):
        """Sets the message_error_context of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.


        :param message_error_context: The message_error_context of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :type: EdiFabricCoreModelEdiErrorContextsMessageErrorContext
        """

        self._message_error_context = message_error_context

    @property
    def message(self):
        """Gets the message of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501


        :return: The message of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.


        :param message: The message of this EdiFabricCoreModelEdiErrorContextsReaderErrorContext.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdiFabricCoreModelEdiErrorContextsReaderErrorContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdiFabricCoreModelEdiErrorContextsReaderErrorContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
