# coding: utf-8

"""
    EdiFabric API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.edi_fabric_core_model_edi_edi_message import EdiFabricCoreModelEdiEdiMessage  # noqa: F401,E501
from swagger_client.models.edi_fabric_core_model_edi_x12_gs import EdiFabricCoreModelEdiX12GS  # noqa: F401,E501
from swagger_client.models.edi_fabric_core_model_edi_x12_isa import EdiFabricCoreModelEdiX12ISA  # noqa: F401,E501


class EdiFabricWebApiModelsX12Acknowledgment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_isa': 'EdiFabricCoreModelEdiX12ISA',
        'original_gs': 'EdiFabricCoreModelEdiX12GS',
        'ack_type': 'str',
        'ack': 'EdiFabricCoreModelEdiEdiMessage',
        'original_transactions': 'list[EdiFabricCoreModelEdiEdiMessage]'
    }

    attribute_map = {
        'original_isa': 'originalIsa',
        'original_gs': 'originalGs',
        'ack_type': 'ackType',
        'ack': 'ack',
        'original_transactions': 'originalTransactions'
    }

    def __init__(self, original_isa=None, original_gs=None, ack_type=None, ack=None, original_transactions=None):  # noqa: E501
        """EdiFabricWebApiModelsX12Acknowledgment - a model defined in Swagger"""  # noqa: E501

        self._original_isa = None
        self._original_gs = None
        self._ack_type = None
        self._ack = None
        self._original_transactions = None
        self.discriminator = None

        if original_isa is not None:
            self.original_isa = original_isa
        if original_gs is not None:
            self.original_gs = original_gs
        if ack_type is not None:
            self.ack_type = ack_type
        if ack is not None:
            self.ack = ack
        if original_transactions is not None:
            self.original_transactions = original_transactions

    @property
    def original_isa(self):
        """Gets the original_isa of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501


        :return: The original_isa of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :rtype: EdiFabricCoreModelEdiX12ISA
        """
        return self._original_isa

    @original_isa.setter
    def original_isa(self, original_isa):
        """Sets the original_isa of this EdiFabricWebApiModelsX12Acknowledgment.


        :param original_isa: The original_isa of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :type: EdiFabricCoreModelEdiX12ISA
        """

        self._original_isa = original_isa

    @property
    def original_gs(self):
        """Gets the original_gs of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501


        :return: The original_gs of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :rtype: EdiFabricCoreModelEdiX12GS
        """
        return self._original_gs

    @original_gs.setter
    def original_gs(self, original_gs):
        """Sets the original_gs of this EdiFabricWebApiModelsX12Acknowledgment.


        :param original_gs: The original_gs of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :type: EdiFabricCoreModelEdiX12GS
        """

        self._original_gs = original_gs

    @property
    def ack_type(self):
        """Gets the ack_type of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501


        :return: The ack_type of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :rtype: str
        """
        return self._ack_type

    @ack_type.setter
    def ack_type(self, ack_type):
        """Sets the ack_type of this EdiFabricWebApiModelsX12Acknowledgment.


        :param ack_type: The ack_type of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Technical", "Functional", "Implementation"]  # noqa: E501
        if ack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ack_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ack_type, allowed_values)
            )

        self._ack_type = ack_type

    @property
    def ack(self):
        """Gets the ack of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501


        :return: The ack of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :rtype: EdiFabricCoreModelEdiEdiMessage
        """
        return self._ack

    @ack.setter
    def ack(self, ack):
        """Sets the ack of this EdiFabricWebApiModelsX12Acknowledgment.


        :param ack: The ack of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :type: EdiFabricCoreModelEdiEdiMessage
        """

        self._ack = ack

    @property
    def original_transactions(self):
        """Gets the original_transactions of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501


        :return: The original_transactions of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :rtype: list[EdiFabricCoreModelEdiEdiMessage]
        """
        return self._original_transactions

    @original_transactions.setter
    def original_transactions(self, original_transactions):
        """Sets the original_transactions of this EdiFabricWebApiModelsX12Acknowledgment.


        :param original_transactions: The original_transactions of this EdiFabricWebApiModelsX12Acknowledgment.  # noqa: E501
        :type: list[EdiFabricCoreModelEdiEdiMessage]
        """

        self._original_transactions = original_transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdiFabricWebApiModelsX12Acknowledgment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdiFabricWebApiModelsX12Acknowledgment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
