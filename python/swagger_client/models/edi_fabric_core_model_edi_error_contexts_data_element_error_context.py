# coding: utf-8

"""
    EdiFabric API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdiFabricCoreModelEdiErrorContextsDataElementErrorContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'position': 'int',
        'code': 'str',
        'value': 'str',
        'component_position': 'int',
        'repetition_position': 'int',
        'message': 'str'
    }

    attribute_map = {
        'name': 'name',
        'position': 'position',
        'code': 'code',
        'value': 'value',
        'component_position': 'componentPosition',
        'repetition_position': 'repetitionPosition',
        'message': 'message'
    }

    def __init__(self, name=None, position=None, code=None, value=None, component_position=None, repetition_position=None, message=None):  # noqa: E501
        """EdiFabricCoreModelEdiErrorContextsDataElementErrorContext - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._position = None
        self._code = None
        self._value = None
        self._component_position = None
        self._repetition_position = None
        self._message = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if position is not None:
            self.position = position
        if code is not None:
            self.code = code
        if value is not None:
            self.value = value
        if component_position is not None:
            self.component_position = component_position
        if repetition_position is not None:
            self.repetition_position = repetition_position
        if message is not None:
            self.message = message

    @property
    def name(self):
        """Gets the name of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The name of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param name: The name of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param position: The position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def code(self):
        """Gets the code of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The code of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param code: The code of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: str
        """
        allowed_values = ["RequiredDataElementMissing", "ConditionalRequiredDataElementMissing", "TooManyDataElements", "DataElementTooShort", "DataElementTooLong", "InvalidCharacterInDataElement", "InvalidCodeValue", "InvalidDate", "InvalidTime", "ExclusionConditionViolated", "TooManyRepetitions", "TooManyComponents", "TooFewRepetitions"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"  # noqa: E501
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def value(self):
        """Gets the value of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The value of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param value: The value of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def component_position(self):
        """Gets the component_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The component_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: int
        """
        return self._component_position

    @component_position.setter
    def component_position(self, component_position):
        """Sets the component_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param component_position: The component_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: int
        """

        self._component_position = component_position

    @property
    def repetition_position(self):
        """Gets the repetition_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The repetition_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: int
        """
        return self._repetition_position

    @repetition_position.setter
    def repetition_position(self, repetition_position):
        """Sets the repetition_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param repetition_position: The repetition_position of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: int
        """

        self._repetition_position = repetition_position

    @property
    def message(self):
        """Gets the message of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501


        :return: The message of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.


        :param message: The message of this EdiFabricCoreModelEdiErrorContextsDataElementErrorContext.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdiFabricCoreModelEdiErrorContextsDataElementErrorContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdiFabricCoreModelEdiErrorContextsDataElementErrorContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
