<?php
/**
 * EdiFabricWebApiModelsGenerateSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdiFabricWebApiModelsGenerateSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdiFabricWebApiModelsGenerateSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdiFabric.Web.Api.Models.GenerateSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'preserve_whitespace' => 'bool',
        'auto_trailers' => 'bool',
        'post_fix' => 'string',
        'segment_separator' => 'string',
        'component_data_element_separator' => 'string',
        'escape_character' => 'string',
        'data_element_separator' => 'string',
        'repetition_separator' => 'string',
        'decimal_point' => 'string',
        'syntax_set' => 'string',
        'char_set' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'preserve_whitespace' => null,
        'auto_trailers' => null,
        'post_fix' => null,
        'segment_separator' => null,
        'component_data_element_separator' => null,
        'escape_character' => null,
        'data_element_separator' => null,
        'repetition_separator' => null,
        'decimal_point' => null,
        'syntax_set' => null,
        'char_set' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'preserve_whitespace' => 'preserve_whitespace',
        'auto_trailers' => 'auto_trailers',
        'post_fix' => 'post_fix',
        'segment_separator' => 'segment_separator',
        'component_data_element_separator' => 'component_data_element_separator',
        'escape_character' => 'escape_character',
        'data_element_separator' => 'data_element_separator',
        'repetition_separator' => 'repetition_separator',
        'decimal_point' => 'decimal_point',
        'syntax_set' => 'syntax_set',
        'char_set' => 'char_set'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'preserve_whitespace' => 'setPreserveWhitespace',
        'auto_trailers' => 'setAutoTrailers',
        'post_fix' => 'setPostFix',
        'segment_separator' => 'setSegmentSeparator',
        'component_data_element_separator' => 'setComponentDataElementSeparator',
        'escape_character' => 'setEscapeCharacter',
        'data_element_separator' => 'setDataElementSeparator',
        'repetition_separator' => 'setRepetitionSeparator',
        'decimal_point' => 'setDecimalPoint',
        'syntax_set' => 'setSyntaxSet',
        'char_set' => 'setCharSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'preserve_whitespace' => 'getPreserveWhitespace',
        'auto_trailers' => 'getAutoTrailers',
        'post_fix' => 'getPostFix',
        'segment_separator' => 'getSegmentSeparator',
        'component_data_element_separator' => 'getComponentDataElementSeparator',
        'escape_character' => 'getEscapeCharacter',
        'data_element_separator' => 'getDataElementSeparator',
        'repetition_separator' => 'getRepetitionSeparator',
        'decimal_point' => 'getDecimalPoint',
        'syntax_set' => 'getSyntaxSet',
        'char_set' => 'getCharSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['preserve_whitespace'] = isset($data['preserve_whitespace']) ? $data['preserve_whitespace'] : null;
        $this->container['auto_trailers'] = isset($data['auto_trailers']) ? $data['auto_trailers'] : null;
        $this->container['post_fix'] = isset($data['post_fix']) ? $data['post_fix'] : null;
        $this->container['segment_separator'] = isset($data['segment_separator']) ? $data['segment_separator'] : null;
        $this->container['component_data_element_separator'] = isset($data['component_data_element_separator']) ? $data['component_data_element_separator'] : null;
        $this->container['escape_character'] = isset($data['escape_character']) ? $data['escape_character'] : null;
        $this->container['data_element_separator'] = isset($data['data_element_separator']) ? $data['data_element_separator'] : null;
        $this->container['repetition_separator'] = isset($data['repetition_separator']) ? $data['repetition_separator'] : null;
        $this->container['decimal_point'] = isset($data['decimal_point']) ? $data['decimal_point'] : null;
        $this->container['syntax_set'] = isset($data['syntax_set']) ? $data['syntax_set'] : null;
        $this->container['char_set'] = isset($data['char_set']) ? $data['char_set'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets preserve_whitespace
     *
     * @return bool
     */
    public function getPreserveWhitespace()
    {
        return $this->container['preserve_whitespace'];
    }

    /**
     * Sets preserve_whitespace
     *
     * @param bool $preserve_whitespace preserve_whitespace
     *
     * @return $this
     */
    public function setPreserveWhitespace($preserve_whitespace)
    {
        $this->container['preserve_whitespace'] = $preserve_whitespace;

        return $this;
    }

    /**
     * Gets auto_trailers
     *
     * @return bool
     */
    public function getAutoTrailers()
    {
        return $this->container['auto_trailers'];
    }

    /**
     * Sets auto_trailers
     *
     * @param bool $auto_trailers auto_trailers
     *
     * @return $this
     */
    public function setAutoTrailers($auto_trailers)
    {
        $this->container['auto_trailers'] = $auto_trailers;

        return $this;
    }

    /**
     * Gets post_fix
     *
     * @return string
     */
    public function getPostFix()
    {
        return $this->container['post_fix'];
    }

    /**
     * Sets post_fix
     *
     * @param string $post_fix post_fix
     *
     * @return $this
     */
    public function setPostFix($post_fix)
    {
        $this->container['post_fix'] = $post_fix;

        return $this;
    }

    /**
     * Gets segment_separator
     *
     * @return string
     */
    public function getSegmentSeparator()
    {
        return $this->container['segment_separator'];
    }

    /**
     * Sets segment_separator
     *
     * @param string $segment_separator segment_separator
     *
     * @return $this
     */
    public function setSegmentSeparator($segment_separator)
    {
        $this->container['segment_separator'] = $segment_separator;

        return $this;
    }

    /**
     * Gets component_data_element_separator
     *
     * @return string
     */
    public function getComponentDataElementSeparator()
    {
        return $this->container['component_data_element_separator'];
    }

    /**
     * Sets component_data_element_separator
     *
     * @param string $component_data_element_separator component_data_element_separator
     *
     * @return $this
     */
    public function setComponentDataElementSeparator($component_data_element_separator)
    {
        $this->container['component_data_element_separator'] = $component_data_element_separator;

        return $this;
    }

    /**
     * Gets escape_character
     *
     * @return string
     */
    public function getEscapeCharacter()
    {
        return $this->container['escape_character'];
    }

    /**
     * Sets escape_character
     *
     * @param string $escape_character escape_character
     *
     * @return $this
     */
    public function setEscapeCharacter($escape_character)
    {
        $this->container['escape_character'] = $escape_character;

        return $this;
    }

    /**
     * Gets data_element_separator
     *
     * @return string
     */
    public function getDataElementSeparator()
    {
        return $this->container['data_element_separator'];
    }

    /**
     * Sets data_element_separator
     *
     * @param string $data_element_separator data_element_separator
     *
     * @return $this
     */
    public function setDataElementSeparator($data_element_separator)
    {
        $this->container['data_element_separator'] = $data_element_separator;

        return $this;
    }

    /**
     * Gets repetition_separator
     *
     * @return string
     */
    public function getRepetitionSeparator()
    {
        return $this->container['repetition_separator'];
    }

    /**
     * Sets repetition_separator
     *
     * @param string $repetition_separator repetition_separator
     *
     * @return $this
     */
    public function setRepetitionSeparator($repetition_separator)
    {
        $this->container['repetition_separator'] = $repetition_separator;

        return $this;
    }

    /**
     * Gets decimal_point
     *
     * @return string
     */
    public function getDecimalPoint()
    {
        return $this->container['decimal_point'];
    }

    /**
     * Sets decimal_point
     *
     * @param string $decimal_point decimal_point
     *
     * @return $this
     */
    public function setDecimalPoint($decimal_point)
    {
        $this->container['decimal_point'] = $decimal_point;

        return $this;
    }

    /**
     * Gets syntax_set
     *
     * @return string
     */
    public function getSyntaxSet()
    {
        return $this->container['syntax_set'];
    }

    /**
     * Sets syntax_set
     *
     * @param string $syntax_set syntax_set
     *
     * @return $this
     */
    public function setSyntaxSet($syntax_set)
    {
        $this->container['syntax_set'] = $syntax_set;

        return $this;
    }

    /**
     * Gets char_set
     *
     * @return string
     */
    public function getCharSet()
    {
        return $this->container['char_set'];
    }

    /**
     * Sets char_set
     *
     * @param string $char_set char_set
     *
     * @return $this
     */
    public function setCharSet($char_set)
    {
        $this->container['char_set'] = $char_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


