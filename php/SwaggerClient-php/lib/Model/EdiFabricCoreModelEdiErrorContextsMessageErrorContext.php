<?php
/**
 * EdiFabricCoreModelEdiErrorContextsMessageErrorContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdiFabricCoreModelEdiErrorContextsMessageErrorContext Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdiFabricCoreModelEdiErrorContextsMessageErrorContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdiFabric.Core.Model.Edi.ErrorContexts.MessageErrorContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'control_number' => 'string',
        'version' => 'string',
        'codes' => 'string[]',
        'errors' => '\Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsSegmentErrorContext[]',
        'has_errors' => 'bool',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'control_number' => null,
        'version' => null,
        'codes' => null,
        'errors' => null,
        'has_errors' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'control_number' => 'controlNumber',
        'version' => 'version',
        'codes' => 'codes',
        'errors' => 'errors',
        'has_errors' => 'hasErrors',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'control_number' => 'setControlNumber',
        'version' => 'setVersion',
        'codes' => 'setCodes',
        'errors' => 'setErrors',
        'has_errors' => 'setHasErrors',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'control_number' => 'getControlNumber',
        'version' => 'getVersion',
        'codes' => 'getCodes',
        'errors' => 'getErrors',
        'has_errors' => 'getHasErrors',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODES_TRANSACTION_SET_NOT_SUPPORTED = 'TransactionSetNotSupported';
    const CODES_MESSAGE_TRAILER_MISSING = 'MessageTrailerMissing';
    const CODES_CONTROL_NUMBER_NOT_MATCHING = 'ControlNumberNotMatching';
    const CODES_SEGMENTS_COUNT_NOT_MATCHING = 'SegmentsCountNotMatching';
    const CODES_MESSAGE_WITH_ERRORS = 'MessageWithErrors';
    const CODES_MISSING_OR_INVALID_TRANSACTION_SET = 'MissingOrInvalidTransactionSet';
    const CODES_MISSING_OR_INVALID_CONTROL_NUMBER = 'MissingOrInvalidControlNumber';
    const CODES_DUPLICATE_MESSAGE_CONTROL_NUMBER = 'DuplicateMessageControlNumber';
    const CODES_FUNCTIONAL_GROUP_VERSION_NOT_SUPPORTED = 'FunctionalGroupVersionNotSupported';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodesAllowableValues()
    {
        return [
            self::CODES_TRANSACTION_SET_NOT_SUPPORTED,
            self::CODES_MESSAGE_TRAILER_MISSING,
            self::CODES_CONTROL_NUMBER_NOT_MATCHING,
            self::CODES_SEGMENTS_COUNT_NOT_MATCHING,
            self::CODES_MESSAGE_WITH_ERRORS,
            self::CODES_MISSING_OR_INVALID_TRANSACTION_SET,
            self::CODES_MISSING_OR_INVALID_CONTROL_NUMBER,
            self::CODES_DUPLICATE_MESSAGE_CONTROL_NUMBER,
            self::CODES_FUNCTIONAL_GROUP_VERSION_NOT_SUPPORTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['control_number'] = isset($data['control_number']) ? $data['control_number'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['codes'] = isset($data['codes']) ? $data['codes'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['has_errors'] = isset($data['has_errors']) ? $data['has_errors'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets control_number
     *
     * @return string
     */
    public function getControlNumber()
    {
        return $this->container['control_number'];
    }

    /**
     * Sets control_number
     *
     * @param string $control_number control_number
     *
     * @return $this
     */
    public function setControlNumber($control_number)
    {
        $this->container['control_number'] = $control_number;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets codes
     *
     * @return string[]
     */
    public function getCodes()
    {
        return $this->container['codes'];
    }

    /**
     * Sets codes
     *
     * @param string[] $codes codes
     *
     * @return $this
     */
    public function setCodes($codes)
    {
        $allowedValues = $this->getCodesAllowableValues();
        if (!is_null($codes) && array_diff($codes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codes'] = $codes;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsSegmentErrorContext[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsSegmentErrorContext[] $errors errors
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets has_errors
     *
     * @return bool
     */
    public function getHasErrors()
    {
        return $this->container['has_errors'];
    }

    /**
     * Sets has_errors
     *
     * @param bool $has_errors has_errors
     *
     * @return $this
     */
    public function setHasErrors($has_errors)
    {
        $this->container['has_errors'] = $has_errors;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


