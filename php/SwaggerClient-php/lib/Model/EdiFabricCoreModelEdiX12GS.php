<?php
/**
 * EdiFabricCoreModelEdiX12GS
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdiFabricCoreModelEdiX12GS Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdiFabricCoreModelEdiX12GS implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdiFabric.Core.Model.Edi.X12.GS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code_identifying_information_type_1' => 'string',
        'sender_id_code_2' => 'string',
        'receiver_id_code_3' => 'string',
        'date_4' => 'string',
        'time_5' => 'string',
        'group_control_number_6' => 'string',
        'transaction_type_code_7' => 'string',
        'version_and_release_8' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code_identifying_information_type_1' => null,
        'sender_id_code_2' => null,
        'receiver_id_code_3' => null,
        'date_4' => null,
        'time_5' => null,
        'group_control_number_6' => null,
        'transaction_type_code_7' => null,
        'version_and_release_8' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code_identifying_information_type_1' => 'codeIdentifyingInformationType_1',
        'sender_id_code_2' => 'senderIDCode_2',
        'receiver_id_code_3' => 'receiverIDCode_3',
        'date_4' => 'date_4',
        'time_5' => 'time_5',
        'group_control_number_6' => 'groupControlNumber_6',
        'transaction_type_code_7' => 'transactionTypeCode_7',
        'version_and_release_8' => 'versionAndRelease_8'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code_identifying_information_type_1' => 'setCodeIdentifyingInformationType1',
        'sender_id_code_2' => 'setSenderIdCode2',
        'receiver_id_code_3' => 'setReceiverIdCode3',
        'date_4' => 'setDate4',
        'time_5' => 'setTime5',
        'group_control_number_6' => 'setGroupControlNumber6',
        'transaction_type_code_7' => 'setTransactionTypeCode7',
        'version_and_release_8' => 'setVersionAndRelease8'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code_identifying_information_type_1' => 'getCodeIdentifyingInformationType1',
        'sender_id_code_2' => 'getSenderIdCode2',
        'receiver_id_code_3' => 'getReceiverIdCode3',
        'date_4' => 'getDate4',
        'time_5' => 'getTime5',
        'group_control_number_6' => 'getGroupControlNumber6',
        'transaction_type_code_7' => 'getTransactionTypeCode7',
        'version_and_release_8' => 'getVersionAndRelease8'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code_identifying_information_type_1'] = isset($data['code_identifying_information_type_1']) ? $data['code_identifying_information_type_1'] : null;
        $this->container['sender_id_code_2'] = isset($data['sender_id_code_2']) ? $data['sender_id_code_2'] : null;
        $this->container['receiver_id_code_3'] = isset($data['receiver_id_code_3']) ? $data['receiver_id_code_3'] : null;
        $this->container['date_4'] = isset($data['date_4']) ? $data['date_4'] : null;
        $this->container['time_5'] = isset($data['time_5']) ? $data['time_5'] : null;
        $this->container['group_control_number_6'] = isset($data['group_control_number_6']) ? $data['group_control_number_6'] : null;
        $this->container['transaction_type_code_7'] = isset($data['transaction_type_code_7']) ? $data['transaction_type_code_7'] : null;
        $this->container['version_and_release_8'] = isset($data['version_and_release_8']) ? $data['version_and_release_8'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code_identifying_information_type_1
     *
     * @return string
     */
    public function getCodeIdentifyingInformationType1()
    {
        return $this->container['code_identifying_information_type_1'];
    }

    /**
     * Sets code_identifying_information_type_1
     *
     * @param string $code_identifying_information_type_1 code_identifying_information_type_1
     *
     * @return $this
     */
    public function setCodeIdentifyingInformationType1($code_identifying_information_type_1)
    {
        $this->container['code_identifying_information_type_1'] = $code_identifying_information_type_1;

        return $this;
    }

    /**
     * Gets sender_id_code_2
     *
     * @return string
     */
    public function getSenderIdCode2()
    {
        return $this->container['sender_id_code_2'];
    }

    /**
     * Sets sender_id_code_2
     *
     * @param string $sender_id_code_2 sender_id_code_2
     *
     * @return $this
     */
    public function setSenderIdCode2($sender_id_code_2)
    {
        $this->container['sender_id_code_2'] = $sender_id_code_2;

        return $this;
    }

    /**
     * Gets receiver_id_code_3
     *
     * @return string
     */
    public function getReceiverIdCode3()
    {
        return $this->container['receiver_id_code_3'];
    }

    /**
     * Sets receiver_id_code_3
     *
     * @param string $receiver_id_code_3 receiver_id_code_3
     *
     * @return $this
     */
    public function setReceiverIdCode3($receiver_id_code_3)
    {
        $this->container['receiver_id_code_3'] = $receiver_id_code_3;

        return $this;
    }

    /**
     * Gets date_4
     *
     * @return string
     */
    public function getDate4()
    {
        return $this->container['date_4'];
    }

    /**
     * Sets date_4
     *
     * @param string $date_4 date_4
     *
     * @return $this
     */
    public function setDate4($date_4)
    {
        $this->container['date_4'] = $date_4;

        return $this;
    }

    /**
     * Gets time_5
     *
     * @return string
     */
    public function getTime5()
    {
        return $this->container['time_5'];
    }

    /**
     * Sets time_5
     *
     * @param string $time_5 time_5
     *
     * @return $this
     */
    public function setTime5($time_5)
    {
        $this->container['time_5'] = $time_5;

        return $this;
    }

    /**
     * Gets group_control_number_6
     *
     * @return string
     */
    public function getGroupControlNumber6()
    {
        return $this->container['group_control_number_6'];
    }

    /**
     * Sets group_control_number_6
     *
     * @param string $group_control_number_6 group_control_number_6
     *
     * @return $this
     */
    public function setGroupControlNumber6($group_control_number_6)
    {
        $this->container['group_control_number_6'] = $group_control_number_6;

        return $this;
    }

    /**
     * Gets transaction_type_code_7
     *
     * @return string
     */
    public function getTransactionTypeCode7()
    {
        return $this->container['transaction_type_code_7'];
    }

    /**
     * Sets transaction_type_code_7
     *
     * @param string $transaction_type_code_7 transaction_type_code_7
     *
     * @return $this
     */
    public function setTransactionTypeCode7($transaction_type_code_7)
    {
        $this->container['transaction_type_code_7'] = $transaction_type_code_7;

        return $this;
    }

    /**
     * Gets version_and_release_8
     *
     * @return string
     */
    public function getVersionAndRelease8()
    {
        return $this->container['version_and_release_8'];
    }

    /**
     * Sets version_and_release_8
     *
     * @param string $version_and_release_8 version_and_release_8
     *
     * @return $this
     */
    public function setVersionAndRelease8($version_and_release_8)
    {
        $this->container['version_and_release_8'] = $version_and_release_8;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


