<?php
/**
 * EdiFabricCoreModelEdiErrorContextsReaderErrorContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdiFabricCoreModelEdiErrorContextsReaderErrorContext Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdiFabricCoreModelEdiErrorContextsReaderErrorContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdiFabric.Core.Model.Edi.ErrorContexts.ReaderErrorContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reader_error_code' => 'string',
        'message_error_context' => '\Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsMessageErrorContext',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reader_error_code' => null,
        'message_error_context' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reader_error_code' => 'readerErrorCode',
        'message_error_context' => 'messageErrorContext',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reader_error_code' => 'setReaderErrorCode',
        'message_error_context' => 'setMessageErrorContext',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reader_error_code' => 'getReaderErrorCode',
        'message_error_context' => 'getMessageErrorContext',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const READER_ERROR_CODE_UNKNOWN = 'Unknown';
    const READER_ERROR_CODE_INVALID_SPEC_OR_ASSEMBLY = 'InvalidSpecOrAssembly';
    const READER_ERROR_CODE_INVALID_CONTROL_STRUCTURE = 'InvalidControlStructure';
    const READER_ERROR_CODE_IMPROPER_END_OF_FILE = 'ImproperEndOfFile';
    const READER_ERROR_CODE_INVALID_INTERCHANGE_CONTENT = 'InvalidInterchangeContent';
    const READER_ERROR_CODE_DEMO_VERSION = 'DemoVersion';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReaderErrorCodeAllowableValues()
    {
        return [
            self::READER_ERROR_CODE_UNKNOWN,
            self::READER_ERROR_CODE_INVALID_SPEC_OR_ASSEMBLY,
            self::READER_ERROR_CODE_INVALID_CONTROL_STRUCTURE,
            self::READER_ERROR_CODE_IMPROPER_END_OF_FILE,
            self::READER_ERROR_CODE_INVALID_INTERCHANGE_CONTENT,
            self::READER_ERROR_CODE_DEMO_VERSION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reader_error_code'] = isset($data['reader_error_code']) ? $data['reader_error_code'] : null;
        $this->container['message_error_context'] = isset($data['message_error_context']) ? $data['message_error_context'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReaderErrorCodeAllowableValues();
        if (!is_null($this->container['reader_error_code']) && !in_array($this->container['reader_error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reader_error_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reader_error_code
     *
     * @return string
     */
    public function getReaderErrorCode()
    {
        return $this->container['reader_error_code'];
    }

    /**
     * Sets reader_error_code
     *
     * @param string $reader_error_code reader_error_code
     *
     * @return $this
     */
    public function setReaderErrorCode($reader_error_code)
    {
        $allowedValues = $this->getReaderErrorCodeAllowableValues();
        if (!is_null($reader_error_code) && !in_array($reader_error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reader_error_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reader_error_code'] = $reader_error_code;

        return $this;
    }

    /**
     * Gets message_error_context
     *
     * @return \Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsMessageErrorContext
     */
    public function getMessageErrorContext()
    {
        return $this->container['message_error_context'];
    }

    /**
     * Sets message_error_context
     *
     * @param \Swagger\Client\Model\EdiFabricCoreModelEdiErrorContextsMessageErrorContext $message_error_context message_error_context
     *
     * @return $this
     */
    public function setMessageErrorContext($message_error_context)
    {
        $this->container['message_error_context'] = $message_error_context;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


