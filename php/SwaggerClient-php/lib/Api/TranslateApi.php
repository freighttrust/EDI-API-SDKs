<?php
/**
 * TranslateApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EdiFabric API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TranslateApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TranslateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation translateEdifact
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode read_mode (optional, default to read_small)
     * @param  bool $validate validate (optional, default to false)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $char_set char_set (optional, default to utf-8)
     * @param  bool $continue_on_error continue_on_error (optional, default to true)
     * @param  bool $transaction_only transaction_only (optional, default to false)
     * @param  string $data_element_separator data_element_separator (optional, default to +)
     * @param  string $component_data_element_separator component_data_element_separator (optional, default to :)
     * @param  string $segment_separator segment_separator (optional, default to ')
     * @param  string $repetition_separator repetition_separator (optional, default to *)
     * @param  string $escape_character escape_character (optional, default to ?)
     * @param  string $decimal_point decimal_point (optional, default to .)
     * @param  string $eancom_syntax eancom_syntax (optional)
     * @param  bool $skip_trailer_validation skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set syntax_set (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdiFabricWebApiModelsEdifactInterchange[]
     */
    public function translateEdifact($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '+', $component_data_element_separator = ':', $segment_separator = ''', $repetition_separator = '*', $escape_character = '?', $decimal_point = '.', $eancom_syntax = null, $skip_trailer_validation = 'false', $syntax_set = null)
    {
        list($response) = $this->translateEdifactWithHttpInfo($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $escape_character, $decimal_point, $eancom_syntax, $skip_trailer_validation, $syntax_set);
        return $response;
    }

    /**
     * Operation translateEdifactWithHttpInfo
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to +)
     * @param  string $component_data_element_separator (optional, default to :)
     * @param  string $segment_separator (optional, default to ')
     * @param  string $repetition_separator (optional, default to *)
     * @param  string $escape_character (optional, default to ?)
     * @param  string $decimal_point (optional, default to .)
     * @param  string $eancom_syntax (optional)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdiFabricWebApiModelsEdifactInterchange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function translateEdifactWithHttpInfo($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '+', $component_data_element_separator = ':', $segment_separator = ''', $repetition_separator = '*', $escape_character = '?', $decimal_point = '.', $eancom_syntax = null, $skip_trailer_validation = 'false', $syntax_set = null)
    {
        $returnType = '\Swagger\Client\Model\EdiFabricWebApiModelsEdifactInterchange[]';
        $request = $this->translateEdifactRequest($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $escape_character, $decimal_point, $eancom_syntax, $skip_trailer_validation, $syntax_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsEdifactInterchange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translateEdifactAsync
     *
     * 
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to +)
     * @param  string $component_data_element_separator (optional, default to :)
     * @param  string $segment_separator (optional, default to ')
     * @param  string $repetition_separator (optional, default to *)
     * @param  string $escape_character (optional, default to ?)
     * @param  string $decimal_point (optional, default to .)
     * @param  string $eancom_syntax (optional)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateEdifactAsync($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '+', $component_data_element_separator = ':', $segment_separator = ''', $repetition_separator = '*', $escape_character = '?', $decimal_point = '.', $eancom_syntax = null, $skip_trailer_validation = 'false', $syntax_set = null)
    {
        return $this->translateEdifactAsyncWithHttpInfo($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $escape_character, $decimal_point, $eancom_syntax, $skip_trailer_validation, $syntax_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateEdifactAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to +)
     * @param  string $component_data_element_separator (optional, default to :)
     * @param  string $segment_separator (optional, default to ')
     * @param  string $repetition_separator (optional, default to *)
     * @param  string $escape_character (optional, default to ?)
     * @param  string $decimal_point (optional, default to .)
     * @param  string $eancom_syntax (optional)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateEdifactAsyncWithHttpInfo($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '+', $component_data_element_separator = ':', $segment_separator = ''', $repetition_separator = '*', $escape_character = '?', $decimal_point = '.', $eancom_syntax = null, $skip_trailer_validation = 'false', $syntax_set = null)
    {
        $returnType = '\Swagger\Client\Model\EdiFabricWebApiModelsEdifactInterchange[]';
        $request = $this->translateEdifactRequest($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $escape_character, $decimal_point, $eancom_syntax, $skip_trailer_validation, $syntax_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateEdifact'
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to +)
     * @param  string $component_data_element_separator (optional, default to :)
     * @param  string $segment_separator (optional, default to ')
     * @param  string $repetition_separator (optional, default to *)
     * @param  string $escape_character (optional, default to ?)
     * @param  string $decimal_point (optional, default to .)
     * @param  string $eancom_syntax (optional)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function translateEdifactRequest($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '+', $component_data_element_separator = ':', $segment_separator = ''', $repetition_separator = '*', $escape_character = '?', $decimal_point = '.', $eancom_syntax = null, $skip_trailer_validation = 'false', $syntax_set = null)
    {
        // verify the required parameter 'edi_file' is set
        if ($edi_file === null || (is_array($edi_file) && count($edi_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_file when calling translateEdifact'
            );
        }

        $resourcePath = '/translate/edifact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($read_mode !== null) {
            $queryParams['read_mode'] = ObjectSerializer::toQueryValue($read_mode);
        }
        // query params
        if ($validate !== null) {
            $queryParams['validate'] = ObjectSerializer::toQueryValue($validate);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // form params
        if ($char_set !== null) {
            $formParams['char_set'] = ObjectSerializer::toFormValue($char_set);
        }
        // form params
        if ($continue_on_error !== null) {
            $formParams['continue_on_error'] = ObjectSerializer::toFormValue($continue_on_error);
        }
        // form params
        if ($transaction_only !== null) {
            $formParams['transaction_only'] = ObjectSerializer::toFormValue($transaction_only);
        }
        // form params
        if ($data_element_separator !== null) {
            $formParams['data_element_separator'] = ObjectSerializer::toFormValue($data_element_separator);
        }
        // form params
        if ($component_data_element_separator !== null) {
            $formParams['component_data_element_separator'] = ObjectSerializer::toFormValue($component_data_element_separator);
        }
        // form params
        if ($segment_separator !== null) {
            $formParams['segment_separator'] = ObjectSerializer::toFormValue($segment_separator);
        }
        // form params
        if ($repetition_separator !== null) {
            $formParams['repetition_separator'] = ObjectSerializer::toFormValue($repetition_separator);
        }
        // form params
        if ($escape_character !== null) {
            $formParams['escape_character'] = ObjectSerializer::toFormValue($escape_character);
        }
        // form params
        if ($decimal_point !== null) {
            $formParams['decimal_point'] = ObjectSerializer::toFormValue($decimal_point);
        }
        // form params
        if ($eancom_syntax !== null) {
            $formParams['eancom_syntax'] = ObjectSerializer::toFormValue($eancom_syntax);
        }
        // form params
        if ($skip_trailer_validation !== null) {
            $formParams['skip_trailer_validation'] = ObjectSerializer::toFormValue($skip_trailer_validation);
        }
        // form params
        if ($syntax_set !== null) {
            $formParams['syntax_set'] = ObjectSerializer::toFormValue($syntax_set);
        }
        // form params
        if ($edi_file !== null) {
            $multipart = true;
            $formParams['edi_file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($edi_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translateX12
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode read_mode (optional, default to read_small)
     * @param  bool $validate validate (optional, default to false)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $char_set char_set (optional, default to utf-8)
     * @param  bool $continue_on_error continue_on_error (optional, default to true)
     * @param  bool $transaction_only transaction_only (optional, default to false)
     * @param  string $data_element_separator data_element_separator (optional, default to *)
     * @param  string $component_data_element_separator component_data_element_separator (optional, default to >)
     * @param  string $segment_separator segment_separator (optional, default to ~)
     * @param  string $repetition_separator repetition_separator (optional, default to ^)
     * @param  bool $skip_trailer_validation skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set syntax_set (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EdiFabricWebApiModelsX12Interchange[]
     */
    public function translateX12($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '*', $component_data_element_separator = '>', $segment_separator = '~', $repetition_separator = '^', $skip_trailer_validation = 'false', $syntax_set = null)
    {
        list($response) = $this->translateX12WithHttpInfo($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $skip_trailer_validation, $syntax_set);
        return $response;
    }

    /**
     * Operation translateX12WithHttpInfo
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to *)
     * @param  string $component_data_element_separator (optional, default to >)
     * @param  string $segment_separator (optional, default to ~)
     * @param  string $repetition_separator (optional, default to ^)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EdiFabricWebApiModelsX12Interchange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function translateX12WithHttpInfo($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '*', $component_data_element_separator = '>', $segment_separator = '~', $repetition_separator = '^', $skip_trailer_validation = 'false', $syntax_set = null)
    {
        $returnType = '\Swagger\Client\Model\EdiFabricWebApiModelsX12Interchange[]';
        $request = $this->translateX12Request($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $skip_trailer_validation, $syntax_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsX12Interchange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EdiFabricWebApiModelsErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translateX12Async
     *
     * 
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to *)
     * @param  string $component_data_element_separator (optional, default to >)
     * @param  string $segment_separator (optional, default to ~)
     * @param  string $repetition_separator (optional, default to ^)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateX12Async($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '*', $component_data_element_separator = '>', $segment_separator = '~', $repetition_separator = '^', $skip_trailer_validation = 'false', $syntax_set = null)
    {
        return $this->translateX12AsyncWithHttpInfo($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $skip_trailer_validation, $syntax_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateX12AsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to *)
     * @param  string $component_data_element_separator (optional, default to >)
     * @param  string $segment_separator (optional, default to ~)
     * @param  string $repetition_separator (optional, default to ^)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateX12AsyncWithHttpInfo($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '*', $component_data_element_separator = '>', $segment_separator = '~', $repetition_separator = '^', $skip_trailer_validation = 'false', $syntax_set = null)
    {
        $returnType = '\Swagger\Client\Model\EdiFabricWebApiModelsX12Interchange[]';
        $request = $this->translateX12Request($edi_file, $read_mode, $validate, $accept, $char_set, $continue_on_error, $transaction_only, $data_element_separator, $component_data_element_separator, $segment_separator, $repetition_separator, $skip_trailer_validation, $syntax_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateX12'
     *
     * @param  \SplFileObject $edi_file EDI file to translate (required)
     * @param  string $read_mode (optional, default to read_small)
     * @param  bool $validate (optional, default to false)
     * @param  string $accept (optional, default to application/json)
     * @param  string $char_set (optional, default to utf-8)
     * @param  bool $continue_on_error (optional, default to true)
     * @param  bool $transaction_only (optional, default to false)
     * @param  string $data_element_separator (optional, default to *)
     * @param  string $component_data_element_separator (optional, default to >)
     * @param  string $segment_separator (optional, default to ~)
     * @param  string $repetition_separator (optional, default to ^)
     * @param  bool $skip_trailer_validation (optional, default to false)
     * @param  string $syntax_set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function translateX12Request($edi_file, $read_mode = 'read_small', $validate = 'false', $accept = 'application/json', $char_set = 'utf-8', $continue_on_error = 'true', $transaction_only = 'false', $data_element_separator = '*', $component_data_element_separator = '>', $segment_separator = '~', $repetition_separator = '^', $skip_trailer_validation = 'false', $syntax_set = null)
    {
        // verify the required parameter 'edi_file' is set
        if ($edi_file === null || (is_array($edi_file) && count($edi_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_file when calling translateX12'
            );
        }

        $resourcePath = '/translate/x12';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($read_mode !== null) {
            $queryParams['read_mode'] = ObjectSerializer::toQueryValue($read_mode);
        }
        // query params
        if ($validate !== null) {
            $queryParams['validate'] = ObjectSerializer::toQueryValue($validate);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // form params
        if ($char_set !== null) {
            $formParams['char_set'] = ObjectSerializer::toFormValue($char_set);
        }
        // form params
        if ($continue_on_error !== null) {
            $formParams['continue_on_error'] = ObjectSerializer::toFormValue($continue_on_error);
        }
        // form params
        if ($transaction_only !== null) {
            $formParams['transaction_only'] = ObjectSerializer::toFormValue($transaction_only);
        }
        // form params
        if ($data_element_separator !== null) {
            $formParams['data_element_separator'] = ObjectSerializer::toFormValue($data_element_separator);
        }
        // form params
        if ($component_data_element_separator !== null) {
            $formParams['component_data_element_separator'] = ObjectSerializer::toFormValue($component_data_element_separator);
        }
        // form params
        if ($segment_separator !== null) {
            $formParams['segment_separator'] = ObjectSerializer::toFormValue($segment_separator);
        }
        // form params
        if ($repetition_separator !== null) {
            $formParams['repetition_separator'] = ObjectSerializer::toFormValue($repetition_separator);
        }
        // form params
        if ($skip_trailer_validation !== null) {
            $formParams['skip_trailer_validation'] = ObjectSerializer::toFormValue($skip_trailer_validation);
        }
        // form params
        if ($syntax_set !== null) {
            $formParams['syntax_set'] = ObjectSerializer::toFormValue($syntax_set);
        }
        // form params
        if ($edi_file !== null) {
            $multipart = true;
            $formParams['edi_file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($edi_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
